/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/stats.js/build/stats.min.js":
/*!**************************************************!*\
  !*** ./node_modules/stats.js/build/stats.min.js ***!
  \**************************************************/
/***/ (function(module) {

eval("// stats.js - http://github.com/mrdoob/stats.js\n(function(f,e){ true?module.exports=e():0})(this,function(){var f=function(){function e(a){c.appendChild(a.dom);return a}function u(a){for(var d=0;d<c.children.length;d++)c.children[d].style.display=d===a?\"block\":\"none\";l=a}var l=0,c=document.createElement(\"div\");c.style.cssText=\"position:fixed;top:0;left:0;cursor:pointer;opacity:0.9;z-index:10000\";c.addEventListener(\"click\",function(a){a.preventDefault();\nu(++l%c.children.length)},!1);var k=(performance||Date).now(),g=k,a=0,r=e(new f.Panel(\"FPS\",\"#0ff\",\"#002\")),h=e(new f.Panel(\"MS\",\"#0f0\",\"#020\"));if(self.performance&&self.performance.memory)var t=e(new f.Panel(\"MB\",\"#f08\",\"#201\"));u(0);return{REVISION:16,dom:c,addPanel:e,showPanel:u,begin:function(){k=(performance||Date).now()},end:function(){a++;var c=(performance||Date).now();h.update(c-k,200);if(c>g+1E3&&(r.update(1E3*a/(c-g),100),g=c,a=0,t)){var d=performance.memory;t.update(d.usedJSHeapSize/\n1048576,d.jsHeapSizeLimit/1048576)}return c},update:function(){k=this.end()},domElement:c,setMode:u}};f.Panel=function(e,f,l){var c=Infinity,k=0,g=Math.round,a=g(window.devicePixelRatio||1),r=80*a,h=48*a,t=3*a,v=2*a,d=3*a,m=15*a,n=74*a,p=30*a,q=document.createElement(\"canvas\");q.width=r;q.height=h;q.style.cssText=\"width:80px;height:48px\";var b=q.getContext(\"2d\");b.font=\"bold \"+9*a+\"px Helvetica,Arial,sans-serif\";b.textBaseline=\"top\";b.fillStyle=l;b.fillRect(0,0,r,h);b.fillStyle=f;b.fillText(e,t,v);\nb.fillRect(d,m,n,p);b.fillStyle=l;b.globalAlpha=.9;b.fillRect(d,m,n,p);return{dom:q,update:function(h,w){c=Math.min(c,h);k=Math.max(k,h);b.fillStyle=l;b.globalAlpha=1;b.fillRect(0,0,r,m);b.fillStyle=f;b.fillText(g(h)+\" \"+e+\" (\"+g(c)+\"-\"+g(k)+\")\",t,v);b.drawImage(q,d+a,m,n-a,p,d,m,n-a,p);b.fillRect(d+n-a,m,a,p);b.fillStyle=l;b.globalAlpha=.9;b.fillRect(d+n-a,m,a,g((1-h/w)*p))}}};return f});\n\n\n//# sourceURL=webpack://check_web_gpu/./node_modules/stats.js/build/stats.min.js?");

/***/ }),

/***/ "./src/ArrayBufferHandler.ts":
/*!***********************************!*\
  !*** ./src/ArrayBufferHandler.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ArrayBufferHandler: () => (/* binding */ ArrayBufferHandler)\n/* harmony export */ });\nconst sizeOfPoints = 4 * Float32Array.BYTES_PER_ELEMENT;\n// ArrayList like implementation for ArrayBuffer\nclass ArrayBufferHandler {\n    buffer;\n    size;\n    previousSize;\n    // The size it was initialized with\n    maxSize;\n    bufferShouldBeRead;\n    constructor(maxSize) {\n        this.buffer = new ArrayBuffer(maxSize);\n        this.size = 0;\n        this.previousSize = 0;\n        this.maxSize = maxSize;\n        this.bufferShouldBeRead = false;\n    }\n    add(data) {\n        if (this.size + data.byteLength > this.maxSize) {\n            throw new Error(\"Buffer overflow\");\n        }\n        const view = new Uint8Array(this.buffer);\n        view.set(new Uint8Array(data), this.size);\n        this.size += data.byteLength;\n        console.log(\"Added\", data.byteLength, \"bytes to buffer\");\n        this.bufferShouldBeRead = true;\n    }\n    getBuffer(skipNPoints = 0) {\n        this.bufferShouldBeRead = false;\n        return this.buffer.slice(skipNPoints * sizeOfPoints, this.size);\n    }\n    getOnlyNewData() {\n        const newBytes = this.size - this.previousSize;\n        const data = this.buffer.slice(this.previousSize, this.size);\n        this.previousSize = this.size;\n        return { data, newBytes };\n    }\n    popN_Bytes(numberOfBytes) {\n        if (this.size == 0) {\n            this.bufferShouldBeRead = false;\n        }\n        if (numberOfBytes > this.size) {\n            numberOfBytes = this.size;\n        }\n        const data = this.buffer.slice(this.size - numberOfBytes, this.size);\n        this.size -= data.byteLength;\n        console.log(\"Popped\", data.byteLength, \"bytes from buffer\", this.size, \"bytes left\");\n        return data;\n    }\n}\n\n\n//# sourceURL=webpack://check_web_gpu/./src/ArrayBufferHandler.ts?");

/***/ }),

/***/ "./src/BlenderCamera.ts":
/*!******************************!*\
  !*** ./src/BlenderCamera.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BlenderCamera: () => (/* binding */ BlenderCamera)\n/* harmony export */ });\n/* harmony import */ var webgpu_matrix__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! webgpu-matrix */ \"./node_modules/webgpu-matrix/dist/1.x/wgpu-matrix.module.js\");\n\nclass BlenderCamera {\n    rotationSpeed;\n    movementSpeed;\n    scrollSpeed;\n    sphericalCoordinate;\n    fov;\n    aspect;\n    near;\n    far;\n    matricesNeedToBeUpdated;\n    cameraMatrix;\n    projectionMatrix;\n    viewProjectionMatrix;\n    constructor(fov, aspect, near, far) {\n        this.fov = fov;\n        this.aspect = aspect;\n        this.near = near;\n        this.far = far;\n        this.rotationSpeed = 0.05;\n        this.movementSpeed = 0.1;\n        this.scrollSpeed = 0.01;\n        this.cameraMatrix = webgpu_matrix__WEBPACK_IMPORTED_MODULE_0__.mat4.identity();\n        this.projectionMatrix = webgpu_matrix__WEBPACK_IMPORTED_MODULE_0__.mat4.perspective(fov, aspect, near, far);\n        this.viewProjectionMatrix = webgpu_matrix__WEBPACK_IMPORTED_MODULE_0__.mat4.identity();\n        this.sphericalCoordinate = new SphericalCoordinate(20, 0, 0);\n        this.sphericalCoordinate.setPhiDeg(90 + 30);\n        this.sphericalCoordinate.setThetaDeg(360 - 45);\n        this.matricesNeedToBeUpdated = false;\n    }\n    moveCameraBase(vec) {\n        this.sphericalCoordinate.moveCenter(vec);\n        this.matricesNeedToBeUpdated = true;\n    }\n    moveCameraBaseScaled(vec) {\n        this.sphericalCoordinate.moveCenter(webgpu_matrix__WEBPACK_IMPORTED_MODULE_0__.vec3.scale(vec, this.movementSpeed));\n        this.matricesNeedToBeUpdated = true;\n    }\n    moveCameraAlongViewDirectionScaled(vec) {\n        // extract up and right vector from camera matrix\n        const up = webgpu_matrix__WEBPACK_IMPORTED_MODULE_0__.vec3.create(this.cameraMatrix[1], this.cameraMatrix[5], this.cameraMatrix[9]);\n        webgpu_matrix__WEBPACK_IMPORTED_MODULE_0__.vec3.normalize(up, up);\n        const right = webgpu_matrix__WEBPACK_IMPORTED_MODULE_0__.vec3.create(this.cameraMatrix[0], this.cameraMatrix[4], this.cameraMatrix[8]);\n        webgpu_matrix__WEBPACK_IMPORTED_MODULE_0__.vec3.normalize(right, right);\n        // move along right and up vector\n        const scaledRight = webgpu_matrix__WEBPACK_IMPORTED_MODULE_0__.vec3.scale(right, vec[0] * this.movementSpeed);\n        const scaledUp = webgpu_matrix__WEBPACK_IMPORTED_MODULE_0__.vec3.scale(up, vec[1] * this.movementSpeed);\n        const movement = webgpu_matrix__WEBPACK_IMPORTED_MODULE_0__.vec3.add(scaledRight, scaledUp);\n        this.moveCameraBase(movement);\n    }\n    rotateUpDown(angle) {\n        this.sphericalCoordinate.rotateUpDown(angle * this.rotationSpeed);\n        this.matricesNeedToBeUpdated = true;\n    }\n    rotateLeftRight(angle) {\n        this.sphericalCoordinate.rotateLeftRight(angle * this.rotationSpeed);\n        this.matricesNeedToBeUpdated = true;\n    }\n    zoomInOut(deltaY) {\n        this.sphericalCoordinate.radius += deltaY * this.scrollSpeed;\n        if (this.sphericalCoordinate.radius < 0.1)\n            this.sphericalCoordinate.radius = 0.1;\n        this.matricesNeedToBeUpdated = true;\n    }\n    getViewMatrix() {\n        return webgpu_matrix__WEBPACK_IMPORTED_MODULE_0__.mat4.inverse(this.cameraMatrix);\n    }\n    calculateCameraMatrix() {\n        const position = this.sphericalCoordinate.getPositionInWorld();\n        const center = this.sphericalCoordinate.getCenterInWorld();\n        const up = this.sphericalCoordinate.getUpVector();\n        webgpu_matrix__WEBPACK_IMPORTED_MODULE_0__.mat4.lookAt(position, center, up, this.cameraMatrix);\n    }\n    calculateViewProjectionMatrix() {\n        this.calculateCameraMatrix();\n        webgpu_matrix__WEBPACK_IMPORTED_MODULE_0__.mat4.multiply(this.projectionMatrix, webgpu_matrix__WEBPACK_IMPORTED_MODULE_0__.mat4.inverse(this.cameraMatrix), this.viewProjectionMatrix);\n    }\n    getViewProjectionMatrix() {\n        this.calculateViewProjectionMatrix();\n        return this.viewProjectionMatrix;\n    }\n}\nclass SphericalCoordinate {\n    centerInWorld;\n    phi;\n    theta;\n    radius;\n    constructor(radius, phi, theta) {\n        this.centerInWorld = webgpu_matrix__WEBPACK_IMPORTED_MODULE_0__.vec3.create();\n        this.phi = phi;\n        this.theta = theta;\n        this.radius = radius;\n    }\n    getPositionInWorld() {\n        const positionInWorld = webgpu_matrix__WEBPACK_IMPORTED_MODULE_0__.vec3.create();\n        positionInWorld[0] = this.radius * Math.sin(this.phi) * Math.cos(this.theta);\n        positionInWorld[1] = this.radius * Math.sin(this.phi) * Math.sin(this.theta);\n        positionInWorld[2] = this.radius * Math.cos(this.phi);\n        return positionInWorld;\n    }\n    getCenterInWorld() {\n        return this.centerInWorld;\n    }\n    getUpVector() {\n        const up = webgpu_matrix__WEBPACK_IMPORTED_MODULE_0__.vec3.create(Math.cos(this.phi) * Math.cos(this.theta), Math.cos(this.phi) * Math.sin(this.theta), -Math.sin(this.phi));\n        return up;\n    }\n    moveCenter(vec) {\n        webgpu_matrix__WEBPACK_IMPORTED_MODULE_0__.vec3.add(this.centerInWorld, vec, this.centerInWorld);\n    }\n    rotateUpDown(angle) {\n        this.phi += this.degToRad(angle);\n        this.assertPhiRange();\n    }\n    rotateLeftRight(angle) {\n        this.theta += this.degToRad(angle);\n        this.assertThetaRange();\n    }\n    setPhiDeg(phi) {\n        this.phi = this.degToRad(phi);\n        this.assertPhiRange();\n    }\n    setThetaDeg(theta) {\n        this.theta = this.degToRad(theta);\n        this.assertThetaRange();\n    }\n    assertPhiRange() {\n        if (this.phi < 0)\n            this.phi = 0;\n        if (this.phi > Math.PI)\n            this.phi = Math.PI;\n    }\n    assertThetaRange() {\n        this.theta = this.theta % (Math.PI * 2);\n    }\n    degToRad(deg) {\n        return deg * Math.PI / 180;\n    }\n}\n\n\n//# sourceURL=webpack://check_web_gpu/./src/BlenderCamera.ts?");

/***/ }),

/***/ "./src/FileDropHandler.ts":
/*!********************************!*\
  !*** ./src/FileDropHandler.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FileDropHandler: () => (/* binding */ FileDropHandler)\n/* harmony export */ });\n/* harmony import */ var _SmallLASLoader__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./SmallLASLoader */ \"./src/SmallLASLoader.ts\");\n/* harmony import */ var _ArrayBufferHandler__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ArrayBufferHandler */ \"./src/ArrayBufferHandler.ts\");\n\n\nclass FileDropHandler {\n    container;\n    loadedFiles;\n    loadedArrayBuffers;\n    // private isArrayBufferClaimed: boolean[];\n    arrayBufferHandler;\n    constructor(container, maxBufferSize) {\n        this.container = container;\n        this.loadedFiles = [];\n        this.loadedArrayBuffers = [];\n        // this.isArrayBufferClaimed = [];\n        this.arrayBufferHandler = new _ArrayBufferHandler__WEBPACK_IMPORTED_MODULE_1__.ArrayBufferHandler(maxBufferSize);\n        this.init();\n    }\n    getArrayBufferHandler() {\n        return this.arrayBufferHandler;\n    }\n    init() {\n        this.container.ondrop = (ev) => {\n            this.dropHandler(ev);\n        };\n        this.container.ondragover = (ev) => {\n            this.dragOverHandler(ev);\n        };\n    }\n    dropHandler(ev) {\n        console.log(\"File(s) dropped\");\n        // Prevent default behavior (Prevent file from being opened)\n        ev.preventDefault();\n        if (!ev.dataTransfer) {\n            console.error(\"No data transfer\");\n            return;\n        }\n        const loadedFiles = [];\n        if (ev.dataTransfer.items) {\n            // Use DataTransferItemList interface to access the file(s)\n            [...ev.dataTransfer.items].forEach((item, i) => {\n                // If dropped items aren't files, reject them\n                if (item.kind === \"file\") {\n                    const file = item.getAsFile();\n                    console.log(`… file[${i}].name = ${file.name}`);\n                    loadedFiles.push(file);\n                }\n            });\n        }\n        else {\n            // Use DataTransfer interface to access the file(s)\n            [...ev.dataTransfer.files].forEach((file, i) => {\n                console.log(`… file[${i}].name = ${file.name}`);\n            });\n        }\n        /*\n                this.loadDroppedFiles(loadedFiles).then(r => {\n                    console.log(\"Loaded files\", r);\n\n                    for (let loadedFile of r) {\n\n                    }\n                });\n        */\n        this.loadDroppedFiles(loadedFiles);\n    }\n    claimArrayBufferPoints(number_of_points) {\n        if (this.loadedArrayBuffers.length === 0) {\n            // console.log(\"No array buffers loaded\");\n            return;\n        }\n        let number_of_bytes = number_of_points * 4 * Float32Array.BYTES_PER_ELEMENT;\n        while (number_of_bytes > 0 && this.loadedArrayBuffers.length > 0) {\n            const buffer = this.loadedArrayBuffers.pop(); // Can force this because we checked the length before.\n            if (buffer.byteLength > number_of_bytes) {\n                // add buffer to handler\n                const slice = buffer.slice(0, number_of_bytes);\n                this.arrayBufferHandler.add(slice);\n                // add the rest back to the loadedArrayBuffers\n                this.loadedArrayBuffers.push(buffer.slice(number_of_bytes));\n                number_of_points -= slice.byteLength;\n            }\n            else {\n                this.arrayBufferHandler.add(buffer);\n                number_of_points -= buffer.byteLength;\n            }\n        }\n    }\n    lasLoader = new _SmallLASLoader__WEBPACK_IMPORTED_MODULE_0__.SmallLASLoader();\n    /*\n    loadDroppedFiles(files: File[]): Promise<Awaited<null | ArrayBuffer>[]> {\n        return Promise.all(files.map(async (file) => {\n            if (this.loadedFiles.includes(file.name)) {\n                console.log(\"Already loaded file\", file.name);\n                return null;\n            }\n            if (file.name.endsWith(\".las\")) {\n                const header = await this.lasLoader.loadLasHeader(file);\n                console.log(\"loading las file\", file, header);\n                this.loadedFiles.push(file.name);\n                return await this.lasLoader.loadLasPointsAsBuffer(file, header);\n            } else {\n                return null;\n            }\n        }));\n    }\n     */\n    async loadDroppedFiles(files) {\n        for (let file of files) {\n            if (this.loadedFiles.includes(file.name)) {\n                console.log(\"Already loaded file\", file.name);\n                continue;\n            }\n            if (!this.hasLasEnding(file.name)) {\n                console.log(\"File does not have las ending\", file.name);\n                continue;\n            }\n            const header = await this.lasLoader.loadLasHeader(file);\n            console.log(\"loading las file\", file, header);\n            this.loadedFiles.push(file.name);\n            const points = await this.lasLoader.loadLasPointsAsBuffer(file, header);\n            this.loadedArrayBuffers.push(points);\n            // this.isArrayBufferClaimed.push(false);\n        }\n    }\n    hasLasEnding(fileName) {\n        for (let lasFileEnding of _SmallLASLoader__WEBPACK_IMPORTED_MODULE_0__.LAS_FILE_ENDINGS) {\n            if (fileName.endsWith(lasFileEnding)) {\n                return true;\n            }\n        }\n        return false;\n    }\n    dragOverHandler(ev) {\n        console.log(\"File(s) in drop zone\");\n        ev.preventDefault();\n    }\n}\n\n\n//# sourceURL=webpack://check_web_gpu/./src/FileDropHandler.ts?");

/***/ }),

/***/ "./src/InputHandler.ts":
/*!*****************************!*\
  !*** ./src/InputHandler.ts ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   InputHandler: () => (/* binding */ InputHandler)\n/* harmony export */ });\nclass InputHandler {\n    canvas;\n    leftHeld = false;\n    rightHeld = false;\n    middleHeld = false;\n    camera;\n    constructor(canvas, camera) {\n        this.canvas = canvas;\n        this.camera = camera;\n    }\n    registerInputHandlers() {\n        this.canvas.addEventListener('pointermove', this.handlePointerMove.bind(this));\n        this.canvas.addEventListener('wheel', this.handleScroll.bind(this));\n    }\n    handlePointerMove(event) {\n        // left click to rotate camera\n        if (event.buttons === 1) {\n            this.camera.rotateLeftRight(event.movementX);\n            this.camera.rotateUpDown(event.movementY);\n        }\n        // middle click to move camera\n        if (event.buttons === 4) {\n            this.camera.moveCameraAlongViewDirectionScaled([event.movementX, -event.movementY, 0]);\n        }\n    }\n    handleScroll(event) {\n        this.camera.zoomInOut(event.deltaY);\n    }\n}\n\n\n//# sourceURL=webpack://check_web_gpu/./src/InputHandler.ts?");

/***/ }),

/***/ "./src/SmallLASLoader.ts":
/*!*******************************!*\
  !*** ./src/SmallLASLoader.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LAS_FILE_ENDINGS: () => (/* binding */ LAS_FILE_ENDINGS),\n/* harmony export */   SmallLASLoader: () => (/* binding */ SmallLASLoader)\n/* harmony export */ });\nconst LAS_FILE_ENDINGS = [\n    \".las\",\n    \".LAS\"\n];\nclass SmallLASLoader {\n    async loadLASHeader(file_path) {\n        const response = await fetch(file_path);\n        const buffer = await response.arrayBuffer();\n        const dataView = new DataView(buffer);\n        let header = {\n            versionMajor: dataView.getUint8(24),\n            versionMinor: dataView.getUint8(25),\n            headerSize: dataView.getUint16(94, true),\n            offsetToPointData: dataView.getUint32(96, true),\n            numberOfVariableLengthRecords: dataView.getUint32(100, true),\n            pointDataFormatID: dataView.getUint8(104),\n            pointDataRecordLength: dataView.getUint16(105, true),\n            xScaleFactor: dataView.getFloat64(131, true),\n            yScaleFactor: dataView.getFloat64(139, true),\n            zScaleFactor: dataView.getFloat64(147, true),\n            xOffset: dataView.getFloat64(155, true),\n            yOffset: dataView.getFloat64(163, true),\n            zOffset: dataView.getFloat64(171, true),\n            maxX: dataView.getFloat64(179, true),\n            minX: dataView.getFloat64(187, true),\n            maxY: dataView.getFloat64(195, true),\n            minY: dataView.getFloat64(203, true),\n            maxZ: dataView.getFloat64(211, true),\n            minZ: dataView.getFloat64(219, true),\n            // Set later\n            numberOfPointRecords: BigInt(0),\n            numberOfExtendedVariableLengthRecords: 0\n        };\n        if (header.versionMajor !== 1 || header.versionMinor <= 2) {\n            header.numberOfPointRecords = BigInt(dataView.getUint32(107, true));\n        }\n        else {\n            header.numberOfPointRecords = dataView.getBigUint64(247, true);\n            header.numberOfExtendedVariableLengthRecords = dataView.getUint32(243, true);\n        }\n        return header;\n    }\n    async loadLasHeader(file) {\n        const buffer = await file.arrayBuffer();\n        const dataView = new DataView(buffer);\n        let header = {\n            versionMajor: dataView.getUint8(24),\n            versionMinor: dataView.getUint8(25),\n            headerSize: dataView.getUint16(94, true),\n            offsetToPointData: dataView.getUint32(96, true),\n            numberOfVariableLengthRecords: dataView.getUint32(100, true),\n            pointDataFormatID: dataView.getUint8(104),\n            pointDataRecordLength: dataView.getUint16(105, true),\n            xScaleFactor: dataView.getFloat64(131, true),\n            yScaleFactor: dataView.getFloat64(139, true),\n            zScaleFactor: dataView.getFloat64(147, true),\n            xOffset: dataView.getFloat64(155, true),\n            yOffset: dataView.getFloat64(163, true),\n            zOffset: dataView.getFloat64(171, true),\n            maxX: dataView.getFloat64(179, true),\n            minX: dataView.getFloat64(187, true),\n            maxY: dataView.getFloat64(195, true),\n            minY: dataView.getFloat64(203, true),\n            maxZ: dataView.getFloat64(211, true),\n            minZ: dataView.getFloat64(219, true),\n            // Set later\n            numberOfPointRecords: BigInt(0),\n            numberOfExtendedVariableLengthRecords: 0\n        };\n        if (header.versionMajor !== 1 || header.versionMinor <= 2) {\n            header.numberOfPointRecords = BigInt(dataView.getUint32(107, true));\n        }\n        else {\n            header.numberOfPointRecords = dataView.getBigUint64(247, true);\n            header.numberOfExtendedVariableLengthRecords = dataView.getUint32(243, true);\n        }\n        return header;\n    }\n    async loadLASPoints(file_path, header) {\n        const response = await fetch(file_path);\n        const buffer = await response.arrayBuffer();\n        const dataView = new DataView(buffer);\n        const numberOfPoints_int = Number(header.numberOfPointRecords);\n        const points = new Array(numberOfPoints_int);\n        for (let i = 0; i < numberOfPoints_int; i++) {\n            const offset = header.offsetToPointData + i * header.pointDataRecordLength;\n            points[i] = {\n                x: dataView.getInt32(offset + 0, true) * header.xScaleFactor + header.xOffset,\n                y: dataView.getInt32(offset + 8, true) * header.yScaleFactor + header.yOffset,\n                z: dataView.getInt32(offset + 16, true) * header.zScaleFactor + header.zOffset,\n                red: dataView.getUint16(offset + 28, true),\n                green: dataView.getUint16(offset + 30, true),\n                blue: dataView.getUint16(offset + 32, true),\n            };\n        }\n        return points;\n    }\n    async loadLASPointsAsBuffer(file_path, header, max_points = 1e12) {\n        const response = await fetch(file_path);\n        const buffer = await response.arrayBuffer();\n        return this.loadLasPointsAsBufferHelper(buffer, header, max_points);\n    }\n    async loadLasPointsAsBuffer(file, header, max_points = 1e12) {\n        const buffer = await file.arrayBuffer();\n        return this.loadLasPointsAsBufferHelper(buffer, header, max_points);\n    }\n    loadLasPointsAsBufferHelper(buffer, header, max_points = 1e12) {\n        const dataView = new DataView(buffer);\n        const skipper = 1;\n        //\n        let rgbOffset = 0;\n        if (header.pointDataFormatID === 2)\n            rgbOffset = 20;\n        if (header.pointDataFormatID === 3)\n            rgbOffset = 28;\n        if (header.pointDataFormatID === 5)\n            rgbOffset = 28;\n        if (header.pointDataFormatID === 7)\n            rgbOffset = 30;\n        console.log(\"rgbOffset according to header: \", rgbOffset);\n        const numberOfPoints_int = Number(header.numberOfPointRecords);\n        const pointBuffer = new ArrayBuffer(numberOfPoints_int * (16));\n        const pointView = new DataView(pointBuffer);\n        for (let i = 0; i < Math.min(numberOfPoints_int, max_points); i += skipper) {\n            const read_offset = header.offsetToPointData + i * header.pointDataRecordLength;\n            let x = dataView.getInt32(read_offset + 0, true) * header.xScaleFactor + header.xOffset;\n            let y = dataView.getInt32(read_offset + 4, true) * header.yScaleFactor + header.yOffset;\n            let z = dataView.getInt32(read_offset + 8, true) * header.zScaleFactor + header.zOffset;\n            // use max and min extent to normalize\n            // x = (x - header.minX) / (header.maxX - header.minX);\n            // y = (y - header.minY) / (header.maxY - header.minY);\n            // z = (z - header.minZ) / (header.maxZ - header.minZ);\n            let R = this.colorTo256(dataView.getUint16(read_offset + rgbOffset + 0, true));\n            let G = this.colorTo256(dataView.getUint16(read_offset + rgbOffset + 2, true));\n            let B = this.colorTo256(dataView.getUint16(read_offset + rgbOffset + 4, true));\n            let r = Math.floor(R > 255 ? R / 256 : R);\n            let g = Math.floor(G > 255 ? G / 256 : G);\n            let b = Math.floor(B > 255 ? B / 256 : B);\n            // write points into buffer\n            const writeOffset = (i / skipper) * 16;\n            pointView.setFloat32(writeOffset + 0, x, true);\n            pointView.setFloat32(writeOffset + 4, y, true);\n            pointView.setFloat32(writeOffset + 8, z, true);\n            pointView.setUint32(writeOffset + 12, r << 16 | g << 8 | b, true);\n        }\n        return pointBuffer;\n    }\n    async loadLasPointsAsPoints(file_path, header, max_points = 1e12) {\n        const response = await fetch(file_path);\n        // const buffer = await response.arrayBuffer();\n        //\n        let rgbOffset = 0;\n        if (header.pointDataFormatID === 2)\n            rgbOffset = 20;\n        if (header.pointDataFormatID === 3)\n            rgbOffset = 28;\n        if (header.pointDataFormatID === 5)\n            rgbOffset = 28;\n        if (header.pointDataFormatID === 7)\n            rgbOffset = 30;\n        const numberOfPoints_int = Number(header.numberOfPointRecords);\n        // const points = new Float32Array(numberOfPoints_int * (4));\n        const points = [];\n        // const buffer = new ArrayBuffer(numberOfPoints_int * header.pointDataRecordLength);\n        const buffer = await response.arrayBuffer();\n        const dataView = new DataView(buffer);\n        // const offset = header.offsetToPointData;\n        // const handle = await fsp.open(file_path, 'r');\n        // await handle.read(buffer, 0, header.headerSize, 0);\n        // add points in corners\n        points.push({ x: 0, y: 0, z: 0, color: 0xff0000 });\n        points.push({ x: 1, y: 0, z: 0, color: 0xff0000 });\n        points.push({ x: 0, y: 1, z: 0, color: 0xff0000 });\n        points.push({ x: 1, y: 1, z: 0, color: 0xff0000 });\n        points.push({ x: 0, y: 0, z: 1, color: 0xff0000 });\n        points.push({ x: 1, y: 0, z: 1, color: 0xff0000 });\n        points.push({ x: 0, y: 1, z: 1, color: 0xff0000 });\n        points.push({ x: 1, y: 1, z: 1, color: 0xff0000 });\n        // Currently only taking every 500th point to reduce data size during development\n        for (let i = 0; i < Math.min(numberOfPoints_int, max_points); i += 500) {\n            const offset = header.offsetToPointData + i * header.pointDataRecordLength;\n            let X = dataView.getInt32(offset + 0, true);\n            let Y = dataView.getInt32(offset + 4, true);\n            let Z = dataView.getInt32(offset + 8, true);\n            // let x = X * header.xScaleFactor + header.xOffset - header.minX;\n            // let y = Y * header.yScaleFactor + header.yOffset - header.minY;\n            // let z = Z * header.zScaleFactor + header.zOffset - header.minZ;\n            let x = X * header.xScaleFactor + header.xOffset;\n            let y = Y * header.yScaleFactor + header.yOffset;\n            let z = Z * header.zScaleFactor + header.zOffset;\n            // normalize to 0-1 box\n            x = (x - header.minX) / (header.maxX - header.minX);\n            y = (y - header.minY) / (header.maxY - header.minY);\n            z = (z - header.minZ) / (header.maxZ - header.minZ);\n            let R = dataView.getUint16(offset + rgbOffset + 0, true);\n            let G = dataView.getUint16(offset + rgbOffset + 2, true);\n            let B = dataView.getUint16(offset + rgbOffset + 4, true);\n            let r = Math.floor(R > 255 ? R / 256 : R);\n            let g = Math.floor(G > 255 ? G / 256 : G);\n            let b = Math.floor(B > 255 ? B / 256 : B);\n            // read into array\n            const point = {\n                x: x,\n                y: y,\n                z: z,\n                color: r << 16 | g << 8 | b\n            };\n            points.push(point);\n        }\n        return points;\n    }\n    colorTo256(color) {\n        return Math.floor(color > 255 ? color / 256 : color);\n    }\n}\n\n\n//# sourceURL=webpack://check_web_gpu/./src/SmallLASLoader.ts?");

/***/ }),

/***/ "./src/main.ts":
/*!*********************!*\
  !*** ./src/main.ts ***!
  \*********************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var webgpu_matrix__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! webgpu-matrix */ \"./node_modules/webgpu-matrix/dist/1.x/wgpu-matrix.module.js\");\n/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./util */ \"./src/util.ts\");\n/* harmony import */ var _quad__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./quad */ \"./src/quad.ts\");\n/* harmony import */ var _shaders_compute_wgsl__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./shaders/compute.wgsl */ \"./src/shaders/compute.wgsl\");\n/* harmony import */ var _shaders_compute_depth_shader_wgsl__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./shaders/compute_depth_shader.wgsl */ \"./src/shaders/compute_depth_shader.wgsl\");\n/* harmony import */ var _shaders_display_on_screan_wgsl__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./shaders/display_on_screan.wgsl */ \"./src/shaders/display_on_screan.wgsl\");\n/* harmony import */ var stats_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! stats.js */ \"./node_modules/stats.js/build/stats.min.js\");\n/* harmony import */ var stats_js__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(stats_js__WEBPACK_IMPORTED_MODULE_9__);\n/* harmony import */ var _InputHandler__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./InputHandler */ \"./src/InputHandler.ts\");\n/* harmony import */ var _BlenderCamera__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./BlenderCamera */ \"./src/BlenderCamera.ts\");\n/* harmony import */ var _FileDropHandler__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./FileDropHandler */ \"./src/FileDropHandler.ts\");\n\n\n\n// End Region Drag and Drop\nconst canvas = document.getElementById(\"gfx-main\");\nconst debug_div = document.getElementById(\"debug\");\nconst adapter = (await navigator.gpu.requestAdapter());\nif (!adapter) {\n    debug_div.innerText = \"WebGPU is supported but no adapter found!\";\n    throw Error(\"Couldn't request WebGPU adapter.\");\n}\nconst k1Gigabyte = 1024 * 1024 * 1024;\nconst device = (await adapter.requestDevice({\n    requiredLimits: {\n    // maxBufferSize: 2 * k1Gigabyte,\n    // maxComputeWorkgroupStorageSize: 65536\n    // maxStorageBufferBindingSize: 2 * k1Gigabyte,\n    },\n}));\nconsole.log('Device: ', device);\nconst context = canvas.getContext(\"webgpu\");\nconst format = \"bgra8unorm\";\ncontext.configure({\n    device,\n    format,\n});\nconst maxWorkgroupsPerDimension = device.limits.maxComputeWorkgroupsPerDimension;\nconst maxStorageBufferBindingSize = device.limits.maxStorageBufferBindingSize;\n// Region Drag and Drop\nconst container = document.getElementById(\"container\"); // The container element\nconst fileDropHandler = new _FileDropHandler__WEBPACK_IMPORTED_MODULE_3__.FileDropHandler(container, maxStorageBufferBindingSize);\nconst arrayBufferHandler = fileDropHandler.getArrayBufferHandler();\n// Region vertex buffer\nconst quad_vertexBuffer = (0,_quad__WEBPACK_IMPORTED_MODULE_2__.create_and_bind_quad_VertexBuffer)(device);\n// Region pipeline\n\nconst computeShaderModule = device.createShaderModule({\n    label: \"compute shader module\",\n    code: _shaders_compute_wgsl__WEBPACK_IMPORTED_MODULE_4__[\"default\"]\n});\nconst computePipeline = device.createComputePipeline({\n    label: \"compute pipeline\",\n    layout: 'auto',\n    compute: {\n        module: computeShaderModule,\n        entryPoint: \"main\"\n    }\n});\n\nconst compute_depth_shaderModule = device.createShaderModule({\n    label: \"compute depth shader module\",\n    code: _shaders_compute_depth_shader_wgsl__WEBPACK_IMPORTED_MODULE_5__[\"default\"],\n});\nconst compute_depth_pipeline = device.createComputePipeline({\n    label: \"compute depth pipeline\",\n    layout: 'auto',\n    compute: {\n        module: compute_depth_shaderModule,\n        entryPoint: \"main\"\n    }\n});\n\nconst display_shaderModule = device.createShaderModule({\n    label: \"display shader module\",\n    code: _shaders_display_on_screan_wgsl__WEBPACK_IMPORTED_MODULE_6__[\"default\"]\n});\nconst displayPipelineDescriptor = _util__WEBPACK_IMPORTED_MODULE_1__.Util.createPipelineDescriptor_pos4_uv2(device, display_shaderModule, \"vs_main\", \"fs_main\", format);\ndisplayPipelineDescriptor.label = \"display pipeline descriptor\";\ndisplayPipelineDescriptor.primitive = { topology: 'triangle-strip' };\nconst displayPipeline = device.createRenderPipeline(displayPipelineDescriptor);\n// Region Framebuffer\nconst framebuffer = device.createBuffer({\n    label: \"framebuffer\",\n    size: canvas.width * canvas.height * 4 * Float32Array.BYTES_PER_ELEMENT,\n    usage: GPUBufferUsage.COPY_SRC | GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_DST,\n    mappedAtCreation: true,\n});\nconst depthBuffer = device.createBuffer({\n    label: \"depth buffer\",\n    size: canvas.width * canvas.height * Float32Array.BYTES_PER_ELEMENT,\n    usage: GPUBufferUsage.COPY_SRC | GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_DST,\n    mappedAtCreation: true,\n});\n// new Float32Array(depthBuffer.getMappedRange()).fill(0xFFFFFFFF);\n// depthBuffer.unmap();\n// Region Storage Buffer\nfunction createRandomPoints(n) {\n    const points = [];\n    const white = 0xffffff;\n    // (255, 255, 255) = white\n    console.log('white: ', white);\n    for (let i = 0; i < n; i++) {\n        points.push({\n            x: randomNumberBetween(0, 1),\n            y: randomNumberBetween(0, 1),\n            z: randomNumberBetween(0, 1),\n            color: ((Math.random() * 0xff) << 16)\n                + ((Math.random() * 0xff) << 8)\n                + (Math.random() * 0xff << 0),\n            // color: 0x0f0f0f,\n        });\n    }\n    return points;\n}\n// Create points in a line (x-axis)\nfunction createDepthBufferTest(n) {\n    const points = [];\n    for (let i = 0; i < n; i++) {\n        points.push({\n            x: 0,\n            y: i / n * 100,\n            z: 0,\n            color: 0x0f0f0f,\n        });\n    }\n    return points;\n}\nfunction randomOneOfTwoNumbers(a, b) {\n    return Math.random() > 0.5 ? a : b;\n}\nfunction randomNumberBetween(min, max) {\n    return Math.random() * (max - min) + min;\n}\nfunction convertPointsToArrayBuffer(points) {\n    const arr = new ArrayBuffer(points.length * 16);\n    const view = new DataView(arr);\n    for (let i = 0; i < points.length; i++) {\n        const offset = i * 16;\n        view.setFloat32(offset + 0, points[i].x, true);\n        view.setFloat32(offset + 4, points[i].y, true);\n        view.setFloat32(offset + 8, points[i].z, true);\n        view.setUint32(offset + 12, points[i].color, true);\n    }\n    return arr;\n}\n// max number of points is 2^16 - 1\n// const points = createRandomPoints(NUMBER_OF_POINTS);\n// const pointsArr = convertPointsToArrayBuffer(createDepthBufferTest(NUMBER_OF_POINTS));\n// const pointsArr = convertPointsToArrayBuffer(createRandomPoints(NUMBER_OF_POINTS));\n// const pointsArr = convertPointsToArrayBuffer(las_points_as_points);\n// const pointsArr = await lassLoader.loadLASPointsAsBuffer(file_path, las_header);\nlet pointsArr = new ArrayBuffer(maxStorageBufferBindingSize); // 16 is the minimum binding size\n// let numberOfPoints = pointsArr.byteLength / (4 * Float32Array.BYTES_PER_ELEMENT);\nlet numberOfPoints = 1;\nlet pointsOverWorkgroups = 0;\nif (pointsArr.byteLength != 0) {\n    pointsOverWorkgroups = getPointsOverWorkgroups(numberOfPoints);\n}\nfunction getPointsOverWorkgroups(numberOfPoints) {\n    return numberOfPoints / Math.min(numberOfPoints, maxWorkgroupsPerDimension);\n}\nconsole.log('points written to GPU: ', pointsArr);\nconst pointsBuffer = device.createBuffer({\n    label: \"points buffer\",\n    // size: points.length * 16,\n    // size: las_points_as_buffer.byteLength,\n    // size: las_points_as_points.length * 16,\n    size: pointsArr.byteLength,\n    usage: GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_DST | GPUBufferUsage.COPY_SRC,\n    mappedAtCreation: true,\n});\n// console.log(points);\nnew Float32Array(pointsBuffer.getMappedRange()).set(new Float32Array(pointsArr));\npointsBuffer.unmap();\nconst STAGING_BUFFER_SIZE = 1e6 * (4 * Float32Array.BYTES_PER_ELEMENT);\nconst stagingBuffer = device.createBuffer({\n    size: STAGING_BUFFER_SIZE,\n    usage: GPUBufferUsage.MAP_WRITE |\n        GPUBufferUsage.COPY_SRC,\n});\n// Region Uniform\nconst uniformBuffer = device.createBuffer({\n    label: \"uniform buffer\",\n    size: 4 * Float32Array.BYTES_PER_ELEMENT + 16 * Float32Array.BYTES_PER_ELEMENT,\n    usage: GPUBufferUsage.UNIFORM | GPUBufferUsage.COPY_DST,\n});\n// Region BindGroup\nconst compute_depth_shader_bindGroupLayout = compute_depth_pipeline.getBindGroupLayout(0);\ncompute_depth_shader_bindGroupLayout.label = \"compute depth pipeline layout\";\nconst compute_depth_shader_bindGroup = _util__WEBPACK_IMPORTED_MODULE_1__.Util.createBindGroup(device, compute_depth_shader_bindGroupLayout, [uniformBuffer, pointsBuffer, depthBuffer]);\nconst compute_shader_bindGroupLayout = computePipeline.getBindGroupLayout(0);\ncompute_shader_bindGroupLayout.label = \"compute pipeline layout\";\nconst compute_shader_bindGroup = _util__WEBPACK_IMPORTED_MODULE_1__.Util.createBindGroup(device, compute_shader_bindGroupLayout, [uniformBuffer, pointsBuffer, framebuffer, depthBuffer]);\nconst display_pipelineLayout = displayPipeline.getBindGroupLayout(0);\ndisplay_pipelineLayout.label = \"display pipeline layout\";\nconst display_shader_bindGroup = device.createBindGroup({\n    label: \"display bind group\",\n    layout: display_pipelineLayout,\n    entries: [\n        {\n            binding: 0,\n            resource: {\n                buffer: uniformBuffer,\n            }\n        },\n        {\n            binding: 1,\n            resource: {\n                buffer: framebuffer,\n            }\n        },\n    ]\n});\n// Region RenderPassDescriptor\nconst display_renderPassDescriptor = _util__WEBPACK_IMPORTED_MODULE_1__.Util.create_display_RenderPassDescriptor(context, [0, 0, 0, 1]);\n// Region frame\nconst aspect = canvas.width / canvas.height;\n// const camera = new BlenderCamera(60, aspect, 0.1, 100);\n// const inputHandler = new InputHandler(canvas, camera);\n// inputHandler.registerInputHandlers();\n// camera.moveCameraBase([0, 0, -2]);\n// const camera = new BlenderCamera(30, aspect, 0.1, 100);\nconst camera = new _BlenderCamera__WEBPACK_IMPORTED_MODULE_7__.BlenderCamera(Math.PI / 4, aspect, 1, 100);\n// camera.moveCameraBase([0, 0, -10]);\n// camera.moveCameraBase([0, 3, 0]);\nconst inputHandler = new _InputHandler__WEBPACK_IMPORTED_MODULE_8__.InputHandler(canvas, camera);\ninputHandler.registerInputHandlers();\n/*\n// const camera = new Camera(60, aspect, 0.1, 100);\n// const camera = new FPSCamera(60, aspect, 0.1, 100);\n// camera.translateCamera(0, -1, -2);\n// camera.translateCamera(0, 0, -2);\n\n// camera.moveUp(2);\n// camera.moveForward(-5);\n// camera.fixedRotate(0, Math.PI / 2);\n\nlet mouseHeld = false;\ncanvas.addEventListener('pointerdown', () => {\n    mouseHeld = true;\n});\ncanvas.addEventListener('pointerup', () => {\n    mouseHeld = false;\n});\ncanvas.addEventListener('pointermove', (event) => {\n    if (mouseHeld) {\n        // old camera\n        // camera.rotateCamera(0, 1, 0, event.movementX);\n        // camera.rotateCamera(1, 0, 0, -event.movementY);\n\n        // new camera\n        // camera.rotate(event.movementY, -event.movementX);\n    }\n});\n*/\nconst modelMatrix = webgpu_matrix__WEBPACK_IMPORTED_MODULE_0__.mat4.identity();\nconst mVP = webgpu_matrix__WEBPACK_IMPORTED_MODULE_0__.mat4.create();\nconst screen_size = webgpu_matrix__WEBPACK_IMPORTED_MODULE_0__.vec2.create(canvas.width, canvas.height);\n\n\n\n\nconst stats = new (stats_js__WEBPACK_IMPORTED_MODULE_9___default())();\nstats.showPanel(0);\ndocument.body.appendChild(stats.dom);\n// camera.update(0, 0, 0);\n// mat4.rotate(modelMatrix, [-1, 0, 0], Math.PI / 2, modelMatrix);\nwebgpu_matrix__WEBPACK_IMPORTED_MODULE_0__.mat4.rotate(modelMatrix, [0, 0, 1], 90 * Math.PI / 180, modelMatrix);\nwebgpu_matrix__WEBPACK_IMPORTED_MODULE_0__.mat4.rotate(modelMatrix, [0, 1, 0], 180 * Math.PI / 180, modelMatrix);\n// mat4.rotate(modelMatrix, [0, 0, 1], 90 * Math.PI / 180, modelMatrix);\nwebgpu_matrix__WEBPACK_IMPORTED_MODULE_0__.mat4.translate(modelMatrix, [-0.5, -0.5, 0.5], modelMatrix);\nconst initial_depthBuffer = new Float32Array(canvas.width * canvas.height).fill(0xFFFFFFFF);\n// unmap depth buffer\ndepthBuffer.unmap();\nasync function generateFrame() {\n    stats.begin();\n    // Rebind GPU Buffer if it changes\n    // pointsArr = arrayBufferHandler.getBuffer();\n    // new Float32Array(pointsBuffer.getMappedRange()).set(new Float32Array(pointsArr));\n    // pointsBuffer.unmap();\n    // pointsBuffer.mapAsync(GPUBufferUsage.STORAGE).then((arrayBuffer) => {\n    //     new Float32Array(arrayBuffer as unknown as ArrayBuffer).set(new Float32Array(pointsArr));\n    //     pointsBuffer.unmap();\n    // });\n    const commandEncoder = device.createCommandEncoder();\n    fileDropHandler.claimArrayBufferPoints(1e6);\n    if (arrayBufferHandler.bufferShouldBeRead) {\n        await stagingBuffer.mapAsync(GPUMapMode.WRITE).then(() => {\n            let data = new Float32Array(stagingBuffer.getMappedRange());\n            const newPoints = arrayBufferHandler.popN_Bytes(STAGING_BUFFER_SIZE);\n            data.set(new Float32Array(newPoints));\n            stagingBuffer.unmap();\n            console.log('newPoints: ', newPoints);\n            commandEncoder.copyBufferToBuffer(stagingBuffer, 0, pointsBuffer, numberOfPoints * 16, newPoints.byteLength);\n            numberOfPoints += newPoints.byteLength / 16;\n            pointsOverWorkgroups = getPointsOverWorkgroups(numberOfPoints);\n        }).catch((error) => {\n            console.error(error);\n        });\n    }\n    webgpu_matrix__WEBPACK_IMPORTED_MODULE_0__.mat4.multiply(camera.getViewProjectionMatrix(), modelMatrix, mVP);\n    debug_div.innerText = `Number of points: ${numberOfPoints}\n    Number of workgroups: ${Math.min(numberOfPoints, maxWorkgroupsPerDimension)}\n    Points / Workgroup: ${pointsOverWorkgroups}\n    Camera Matrix is \\n${formatF32Array(camera.getViewMatrix())} \\n\n    MVP Matrix is \\n${formatF32Array(mVP)} \\n\n    Model Matrix is \\n${formatF32Array(modelMatrix)}`;\n    const uniform_data = new Float32Array([\n        screen_size[0], screen_size[1],\n        0, 0, // padding\n        ...mVP\n    ]);\n    device.queue.writeBuffer(uniformBuffer, 0, uniform_data.buffer, uniform_data.byteOffset, uniform_data.byteLength);\n    device.queue.writeBuffer(depthBuffer, 0, initial_depthBuffer.buffer, 0, initial_depthBuffer.byteLength);\n    // Compute depth\n    const compute_depth_pass = commandEncoder.beginComputePass();\n    compute_depth_pass.setPipeline(compute_depth_pipeline);\n    compute_depth_pass.setBindGroup(0, compute_depth_shader_bindGroup);\n    // computePass.dispatchWorkgroups(Math.min(numberOfPoints, maxWorkgroupsPerDimension));\n    compute_depth_pass.dispatchWorkgroups(Math.max(1, Math.min(numberOfPoints, maxWorkgroupsPerDimension)), Math.max(1, Math.min(Math.ceil(pointsOverWorkgroups), maxWorkgroupsPerDimension)), 1);\n    compute_depth_pass.end();\n    // Compute\n    const computePass = commandEncoder.beginComputePass();\n    computePass.setPipeline(computePipeline);\n    computePass.setBindGroup(0, compute_shader_bindGroup);\n    // computePass.dispatchWorkgroups(Math.min(numberOfPoints, maxWorkgroupsPerDimension));\n    computePass.dispatchWorkgroups(Math.max(1, Math.min(numberOfPoints, maxWorkgroupsPerDimension)), Math.max(1, Math.min(Math.ceil(pointsOverWorkgroups), maxWorkgroupsPerDimension)), 1);\n    computePass.end();\n    // reset viewport\n    display_renderPassDescriptor.colorAttachments[0]\n        .view = context.getCurrentTexture().createView();\n    // Display\n    const displayPass = commandEncoder.beginRenderPass(display_renderPassDescriptor);\n    displayPass.setPipeline(displayPipeline); // set the pipeline\n    displayPass.setBindGroup(0, display_shader_bindGroup);\n    displayPass.setVertexBuffer(0, quad_vertexBuffer);\n    displayPass.draw(4, 1, 0, 0);\n    displayPass.end();\n    // unmap framebuffer\n    commandEncoder.clearBuffer(framebuffer, 0, framebuffer.size);\n    framebuffer.unmap();\n    depthBuffer.unmap();\n    // submit\n    device.queue.submit([commandEncoder.finish()]);\n    stats.end();\n    requestAnimationFrame(generateFrame);\n}\nrequestAnimationFrame(generateFrame);\nfunction formatF32Array(float32Array) {\n    const helper = webgpu_matrix__WEBPACK_IMPORTED_MODULE_0__.mat4.transpose(float32Array);\n    let string = \"\";\n    for (let i = 0; i < float32Array.length; i++) {\n        string += limitToNDecimals(helper[i], 2) + \",\\t   \";\n        if ((i + 1) % 4 == 0 && i != 0) {\n            string += \"\\n\";\n        }\n    }\n    return string;\n    // return Array.from(float32Array).map((x) => x.toString()).join(\",\\n\");\n}\nfunction limitToNDecimals(x, n) {\n    return Math.round(x * Math.pow(10, n)) / Math.pow(10, n);\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);\n\n//# sourceURL=webpack://check_web_gpu/./src/main.ts?");

/***/ }),

/***/ "./src/quad.ts":
/*!*********************!*\
  !*** ./src/quad.ts ***!
  \*********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   create_and_bind_quad_VertexBuffer: () => (/* binding */ create_and_bind_quad_VertexBuffer),\n/* harmony export */   quad_vertex_array: () => (/* binding */ quad_vertex_array)\n/* harmony export */ });\nconst quad_vertex_array = new Float32Array([\n    -1, -1, 0, 1, 0, 0,\n    1, -1, 0, 1, 1, 0,\n    -1, 1, 0, 1, 0, 1,\n    1, 1, 0, 1, 1, 1,\n]);\nconst quad_vertex_size = 6 * 4;\nconst quad_position_offset = 0;\nconst quad_uv_offset = 4 * 4;\nconst quad_vertex_count = 4;\nfunction create_and_bind_quad_VertexBuffer(device) {\n    const quad_vertexBuffer = device.createBuffer({\n        label: \"quad vertex buffer\",\n        size: quad_vertex_array.byteLength,\n        usage: GPUBufferUsage.VERTEX | GPUBufferUsage.COPY_DST,\n        mappedAtCreation: true,\n    });\n    new Float32Array(quad_vertexBuffer.getMappedRange()).set(quad_vertex_array);\n    quad_vertexBuffer.unmap();\n    return quad_vertexBuffer;\n}\n\n\n\n//# sourceURL=webpack://check_web_gpu/./src/quad.ts?");

/***/ }),

/***/ "./src/util.ts":
/*!*********************!*\
  !*** ./src/util.ts ***!
  \*********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Util: () => (/* binding */ Util)\n/* harmony export */ });\nclass Util {\n    static createPipelineDescriptor_pos4_uv2(device, shader_module, vs_entry_point, fs_entry_point, format) {\n        return {\n            layout: 'auto',\n            vertex: {\n                module: shader_module,\n                entryPoint: vs_entry_point,\n                buffers: [\n                    {\n                        arrayStride: 6 * 4,\n                        attributes: [\n                            {\n                                format: 'float32x4',\n                                offset: 0,\n                                shaderLocation: 0\n                            },\n                            {\n                                format: 'float32x2',\n                                shaderLocation: 1,\n                                offset: 4 * 4\n                            }\n                        ]\n                    }\n                ]\n            },\n            fragment: {\n                module: shader_module,\n                entryPoint: fs_entry_point,\n                targets: [{ format: format }],\n            },\n        };\n    }\n    ;\n    static createBindGroup(device, layout, buffers) {\n        const entries = buffers.map((buffer, i) => {\n            return {\n                binding: i,\n                resource: {\n                    buffer: buffer\n                }\n            };\n        });\n        return device.createBindGroup({\n            layout: layout,\n            entries: entries\n        });\n    }\n    ;\n    static create_display_RenderPassDescriptor(context, clearValue) {\n        return {\n            label: \"display render pass\",\n            colorAttachments: [\n                {\n                    storeOp: 'store',\n                    loadOp: 'clear',\n                    view: context.getCurrentTexture().createView(),\n                    clearValue: clearValue,\n                }\n            ]\n        };\n    }\n    ;\n}\n\n\n//# sourceURL=webpack://check_web_gpu/./src/util.ts?");

/***/ }),

/***/ "./src/shaders/compute.wgsl":
/*!**********************************!*\
  !*** ./src/shaders/compute.wgsl ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (\"// ts: [mVP_uniformBuffer, pointsBuffer, framebuffer, depthBuffer]\\nstruct Uniforms {\\n    canvas_size: vec2<f32>,\\n    mvp: mat4x4<f32>,\\n};\\n\\nstruct Point {\\n    x: f32,\\n    y: f32,\\n    z: f32,\\n//    color: uint32_t,\\n    color: u32,\\n};\\n\\n@group(0) @binding(0) var<uniform> uniforms: Uniforms;\\n@group(0) @binding(1) var<storage, read> inputBuffer: array<Point>;\\n//@group(0) @binding(2) var<storage, read_write> outputBuffer: array<vec4<f32>>;\\n@group(0) @binding(2) var<storage, read_write> outputBuffer: array<atomic<u32>>;\\n@group(0) @binding(3) var<storage, read_write> depthBuffer: array<atomic<u32>>; // I cannt use f32 for atomic operations. https://www.w3.org/TR/WGSL/#atomic-builtin-functions\\n\\n@compute @workgroup_size(1)\\nfn main(\\n    @builtin(global_invocation_id) gid: vec3<u32>,\\n    @builtin(workgroup_id) wid: vec3<u32>,\\n    @builtin(num_workgroups) num_wg: vec3<u32>\\n) {\\n    // Read the point from the input buffer\\n    // Apparently point is a reserved word, so I'm using dot\\n    let dot = inputBuffer[gid.x + gid.y * 65535];\\n\\n    // Project the point using the MVP matrix\\n    let pos = uniforms.mvp * vec4<f32>(dot.x, dot.y, dot.z, 1.0);\\n\\n    // convert pos to ndc\\n    let ndc = pos / pos.w;\\n\\n    // Discard\\n    if (ndc.w < 0.0) {\\n        return;\\n    }\\n\\n    // Convert ndc to screen space coordinates\\n    let screen_x = (ndc.x * 0.5 + 0.5) * uniforms.canvas_size.x;\\n    let screen_y = (ndc.y) * uniforms.canvas_size.y;\\n\\n    // Discard\\n    if (screen_x < 0.0 || screen_x >= uniforms.canvas_size.x) {\\n        return;\\n    }\\n    if (screen_y < 0.0 || screen_y >= uniforms.canvas_size.y) {\\n        return;\\n    }\\n\\n    // Calculate the index into the output buffer using the canvas size\\n    let index = u32(screen_y) * u32(uniforms.canvas_size.x) + u32(screen_x);\\n\\n    // Depth with bitcast\\n    let minDepth_u32 = atomicLoad(&depthBuffer[index]);\\n    let minDepth = bitcast<f32>(minDepth_u32);\\n\\n    // Compute threshold\\n    let depthThreshold = minDepth * 1.00;\\n//    let depthThreshold = 0.5;\\n\\n    // Discard\\n    if (ndc.w > depthThreshold) {\\n//        atomicAdd(&outputBuffer[index * 4 + 0], 0xff);\\n//        atomicAdd(&outputBuffer[index * 4 + 1], 0);\\n//        atomicAdd(&outputBuffer[index * 4 + 2], 0);\\n//        atomicAdd(&outputBuffer[index * 4 + 3], 1);\\n        return;\\n    }\\n\\n    // uint32_t\\n    atomicAdd(&outputBuffer[index * 4 + 0], (dot.color >> 16) & 0xFF); // r\\n    atomicAdd(&outputBuffer[index * 4 + 1], (dot.color >> 8) & 0xFF); // g\\n    atomicAdd(&outputBuffer[index * 4 + 2], (dot.color >> 0) & 0xFF); // b\\n    atomicAdd(&outputBuffer[index * 4 + 3], 1); // a\\n}\\n\\n// Convert a uint32_t color to a vec4<f32> color for use in the fragment shader.\\nfn uint32_t_to_vec4f32(color: u32) -> vec4<f32> {\\n    return vec4<f32>(\\n        f32((color >> 16) & 0xFF) / 255.0,\\n        f32((color >> 8) & 0xFF) / 255.0,\\n        f32((color >> 0) & 0xFF) / 255.0,\\n        1.0\\n    );\\n}\");\n\n//# sourceURL=webpack://check_web_gpu/./src/shaders/compute.wgsl?");

/***/ }),

/***/ "./src/shaders/compute_depth_shader.wgsl":
/*!***********************************************!*\
  !*** ./src/shaders/compute_depth_shader.wgsl ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (\"// ts: [mVP_uniformBuffer, pointsBuffer, depthBuffer]\\nstruct Uniforms {\\n    canvas_size: vec2<f32>,\\n    mvp: mat4x4<f32>,\\n};\\n\\nstruct Point {\\n    x: f32,\\n    y: f32,\\n    z: f32,\\n//    color: uint32_t,\\n    color: u32,\\n};\\n\\n@group(0) @binding(0) var<uniform> uniforms: Uniforms;\\n@group(0) @binding(1) var<storage, read> inputBuffer: array<Point>;\\n@group(0) @binding(2) var<storage, read_write> depthBuffer: array<atomic<u32>>; // I cannot use f32 for atomic operations. https://www.w3.org/TR/WGSL/#atomic-builtin-functions\\n\\n@compute @workgroup_size(1)\\nfn main(\\n    @builtin(global_invocation_id) gid: vec3<u32>,\\n    @builtin(workgroup_id) wid: vec3<u32>,\\n    @builtin(num_workgroups) num_wg: vec3<u32>\\n) {\\n    // Read the point from the input buffer\\n    // Apparently point is a reserved word, so I'm using dot\\n    let dot = inputBuffer[gid.x];\\n\\n    // Project the point using the MVP matrix\\n    let pos = uniforms.mvp * vec4<f32>(dot.x, dot.y, dot.z, 1.0);\\n\\n    // convert pos to ndc\\n    let ndc = pos / pos.w;\\n\\n    // Discard\\n    if (ndc.w < 0.0) {\\n        return;\\n    }\\n\\n    // Convert ndc to screen space coordinates\\n    let screen_x = (ndc.x * 0.5 + 0.5) * uniforms.canvas_size.x;\\n    let screen_y = (ndc.y) * uniforms.canvas_size.y;\\n\\n    // Discard\\n    if (screen_x < 0.0 || screen_x >= uniforms.canvas_size.x) {\\n        return;\\n    }\\n    if (screen_y < 0.0 || screen_y >= uniforms.canvas_size.y) {\\n        return;\\n    }\\n\\n    // Calculate the index into the output buffer using the canvas size\\n    let index = u32(screen_y) * u32(uniforms.canvas_size.x) + u32(screen_x);\\n\\n    // compute depth\\n//    let uint_depth = u32 (ndc.w * f32(0xFFFFFFFF));\\n//    let uint_depth = u32(ndc.z * f32(u32(0xFFFFFFFF)));\\n    let uint_depth = bitcast<u32>(ndc.w);\\n    atomicMin(&depthBuffer[index], uint_depth);\\n}\\n\");\n\n//# sourceURL=webpack://check_web_gpu/./src/shaders/compute_depth_shader.wgsl?");

/***/ }),

/***/ "./src/shaders/display_on_screan.wgsl":
/*!********************************************!*\
  !*** ./src/shaders/display_on_screan.wgsl ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (\"struct VertexIn {\\n    @location(0) position: vec4<f32>,\\n    @location(1) uv: vec2<f32>,\\n}\\n\\nstruct Fragment {\\n    @builtin(position) Position: vec4<f32>,\\n    @location(0) fragUV : vec2f,\\n};\\n\\nstruct Uniforms {\\n    canvas_size: vec2<f32>,\\n    mvp: mat4x4<f32>,\\n};\\n\\n@group(0) @binding(0) var<uniform> uniforms: Uniforms;\\n//@group(0) @binding(1) var<storage, read> inputBuffer: array<vec4<f32>>;\\n@group(0) @binding(1) var<storage, read_write> inputBuffer: array<atomic<u32>>;\\n\\n@vertex\\nfn vs_main(v: VertexIn) -> Fragment {\\n    var output = Fragment();\\n    output.Position = v.position;\\n    output.fragUV = v.uv;\\n    return output;\\n}\\n\\n@fragment\\nfn fs_main(f: Fragment) -> @location(0) vec4<f32> {\\n    let width = uniforms.canvas_size.x;\\n    let height = uniforms.canvas_size.y;\\n\\n    let screen_x = u32(f.fragUV.x * width);\\n    let screen_y = u32(f.fragUV.y * height);\\n\\n    let index = screen_y * u32(width) + screen_x;\\n\\n    let r = atomicLoad(&inputBuffer[index * 4 + 0]);\\n    let g = atomicLoad(&inputBuffer[index * 4 + 1]);\\n    let b = atomicLoad(&inputBuffer[index * 4 + 2]);\\n    let a = atomicLoad(&inputBuffer[index * 4 + 3]);\\n\\n    // Compute average color\\n    let divider = f32(a) * 255;\\n//    let divider = 255.0;\\n    let color = vec4<f32>(\\n        f32(r) / divider,\\n        f32(g) / divider,\\n        f32(b) / divider,\\n        1.0\\n    );\\n\\n    return color;\\n}   // Compute threshold\");\n\n//# sourceURL=webpack://check_web_gpu/./src/shaders/display_on_screan.wgsl?");

/***/ }),

/***/ "./node_modules/webgpu-matrix/dist/1.x/wgpu-matrix.module.js":
/*!*******************************************************************!*\
  !*** ./node_modules/webgpu-matrix/dist/1.x/wgpu-matrix.module.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   mat3: () => (/* binding */ mat3Impl),\n/* harmony export */   mat4: () => (/* binding */ mat4Impl),\n/* harmony export */   setDefaultType: () => (/* binding */ setDefaultType),\n/* harmony export */   types: () => (/* binding */ arrayLike),\n/* harmony export */   utils: () => (/* binding */ utils),\n/* harmony export */   vec2: () => (/* binding */ vec2Impl),\n/* harmony export */   vec3: () => (/* binding */ vec3Impl),\n/* harmony export */   vec4: () => (/* binding */ vec4Impl)\n/* harmony export */ });\n/* wgpu-matrix@1.0.0, license MIT */\nvar arrayLike = /*#__PURE__*/Object.freeze({\n    __proto__: null\n});\n\n/*\n * Copyright 2022 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\nlet EPSILON = 0.000001;\n/**\n * Set the value for EPSILON for various checks\n * @param v - Value to use for EPSILON.\n * @returns previous value of EPSILON;\n */\nfunction setEpsilon(v) {\n    const old = EPSILON;\n    EPSILON = v;\n    return old;\n}\n/**\n * Convert degrees to radians\n * @param degrees - Angle in degrees\n * @returns angle converted to radians\n */\nfunction degToRad(degrees) {\n    return degrees * Math.PI / 180;\n}\n/**\n * Convert radians to degrees\n * @param radians - Angle in radians\n * @returns angle converted to degrees\n */\nfunction radToDeg(radians) {\n    return radians * 180 / Math.PI;\n}\n/**\n * Lerps between a and b via t\n * @param a - starting value\n * @param b - ending value\n * @param t - value where 0 = a and 1 = b\n * @returns a + (b - a) * t\n */\nfunction lerp$3(a, b, t) {\n    return a + (b - a) * t;\n}\n/**\n * Compute the opposite of lerp. Given a and b and a value between\n * a and b returns a value between 0 and 1. 0 if a, 1 if b.\n * Note: no clamping is done.\n * @param a - start value\n * @param b - end value\n * @param v - value between a and b\n * @returns (v - a) / (b - a)\n */\nfunction inverseLerp(a, b, v) {\n    const d = b - a;\n    return (Math.abs(b - a) < EPSILON)\n        ? a\n        : (v - a) / d;\n}\n/**\n * Compute the euclidean modulo\n *\n * ```\n * // table for n / 3\n * -5, -4, -3, -2, -1,  0,  1,  2,  3,  4,  5   <- n\n * ------------------------------------\n * -2  -1  -0  -2  -1   0,  1,  2,  0,  1,  2   <- n % 3\n *  1   2   0   1   2   0,  1,  2,  0,  1,  2   <- euclideanModule(n, 3)\n * ```\n *\n * @param n - dividend\n * @param m - divisor\n * @returns the euclidean modulo of n / m\n */\nfunction euclideanModulo(n, m) {\n    return ((n % m) + m) % m;\n}\n\nvar utils = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    get EPSILON () { return EPSILON; },\n    setEpsilon: setEpsilon,\n    degToRad: degToRad,\n    radToDeg: radToDeg,\n    lerp: lerp$3,\n    inverseLerp: inverseLerp,\n    euclideanModulo: euclideanModulo\n});\n\n/**\n *\n * Vec2 math functions.\n *\n * Almost all functions take an optional `dst` argument. If it is not passed in the\n * functions will create a new Vec2. In other words you can do this\n *\n *     const v = vec2.cross(v1, v2);  // Creates a new Vec2 with the cross product of v1 x v2.\n *\n * or\n *\n *     const v = vec2.create();\n *     vec2.cross(v1, v2, v);  // Puts the cross product of v1 x v2 in v\n *\n * The first style is often easier but depending on where it's used it generates garbage where\n * as there is almost never allocation with the second style.\n *\n * It is always safe to pass any vector as the destination. So for example\n *\n *     vec2.cross(v1, v2, v1);  // Puts the cross product of v1 x v2 in v1\n *\n */\nlet VecType$2 = Float32Array;\n/**\n * Sets the type this library creates for a Vec2\n * @param ctor - the constructor for the type. Either `Float32Array`, 'Float64Array', or `Array`\n * @returns previous constructor for Vec2\n */\nfunction setDefaultType$5(ctor) {\n    const oldType = VecType$2;\n    VecType$2 = ctor;\n    return oldType;\n}\n/**\n * Creates a Vec2; may be called with x, y, z to set initial values.\n *\n * Note: Since passing in a raw JavaScript array\n * is valid in all circumstances, if you want to\n * force a JavaScript array into a Vec2's specified type\n * it would be faster to use\n *\n * ```\n * const v = vec2.clone(someJSArray);\n * ```\n *\n * Note: a consequence of the implementation is if your Vec2Type = `Array`\n * instead of `Float32Array` or `Float64Array` then any values you\n * don't pass in will be undefined. Usually this is not an issue since\n * (a) using `Array` is rare and (b) using `vec2.create` is usually used\n * to create a Vec2 to be filled out as in\n *\n * ```\n * const sum = vec2.create();\n * vec2.add(v1, v2, sum);\n * ```\n *\n * @param x - Initial x value.\n * @param y - Initial y value.\n * @returns the created vector\n */\nfunction create$4(x = 0, y = 0) {\n    const dst = new VecType$2(2);\n    if (x !== undefined) {\n        dst[0] = x;\n        if (y !== undefined) {\n            dst[1] = y;\n        }\n    }\n    return dst;\n}\n\n/*\n * Copyright 2022 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n/**\n * Creates a Vec2; may be called with x, y, z to set initial values. (same as create)\n * @param x - Initial x value.\n * @param y - Initial y value.\n * @returns the created vector\n */\nconst fromValues$2 = create$4;\n/**\n * Applies Math.ceil to each element of vector\n * @param v - Operand vector.\n * @param dst - vector to hold result. If not new one is created.\n * @returns A vector that is the ceil of each element of v.\n */\nfunction ceil$2(v, dst) {\n    dst = dst || new VecType$2(2);\n    dst[0] = Math.ceil(v[0]);\n    dst[1] = Math.ceil(v[1]);\n    return dst;\n}\n/**\n * Applies Math.floor to each element of vector\n * @param v - Operand vector.\n * @param dst - vector to hold result. If not new one is created.\n * @returns A vector that is the floor of each element of v.\n */\nfunction floor$2(v, dst) {\n    dst = dst || new VecType$2(2);\n    dst[0] = Math.floor(v[0]);\n    dst[1] = Math.floor(v[1]);\n    return dst;\n}\n/**\n * Applies Math.round to each element of vector\n * @param v - Operand vector.\n * @param dst - vector to hold result. If not new one is created.\n * @returns A vector that is the round of each element of v.\n */\nfunction round$2(v, dst) {\n    dst = dst || new VecType$2(2);\n    dst[0] = Math.round(v[0]);\n    dst[1] = Math.round(v[1]);\n    return dst;\n}\n/**\n * Clamp each element of vector between min and max\n * @param v - Operand vector.\n * @param max - Min value, default 0\n * @param min - Max value, default 1\n * @param dst - vector to hold result. If not new one is created.\n * @returns A vector that the clamped value of each element of v.\n */\nfunction clamp$2(v, min = 0, max = 1, dst) {\n    dst = dst || new VecType$2(2);\n    dst[0] = Math.min(max, Math.max(min, v[0]));\n    dst[1] = Math.min(max, Math.max(min, v[1]));\n    return dst;\n}\n/**\n * Adds two vectors; assumes a and b have the same dimension.\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param dst - vector to hold result. If not new one is created.\n * @returns A vector that is the sum of a and b.\n */\nfunction add$2(a, b, dst) {\n    dst = dst || new VecType$2(2);\n    dst[0] = a[0] + b[0];\n    dst[1] = a[1] + b[1];\n    return dst;\n}\n/**\n * Adds two vectors, scaling the 2nd; assumes a and b have the same dimension.\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param scale - Amount to scale b\n * @param dst - vector to hold result. If not new one is created.\n * @returns A vector that is the sum of a + b * scale.\n */\nfunction addScaled$2(a, b, scale, dst) {\n    dst = dst || new VecType$2(2);\n    dst[0] = a[0] + b[0] * scale;\n    dst[1] = a[1] + b[1] * scale;\n    return dst;\n}\n/**\n * Returns the angle in radians between two vectors.\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @returns The angle in radians between the 2 vectors.\n */\nfunction angle$1(a, b) {\n    const ax = a[0];\n    const ay = a[1];\n    const bx = a[0];\n    const by = a[1];\n    const mag1 = Math.sqrt(ax * ax + ay * ay);\n    const mag2 = Math.sqrt(bx * bx + by * by);\n    const mag = mag1 * mag2;\n    const cosine = mag && dot$2(a, b) / mag;\n    return Math.acos(cosine);\n}\n/**\n * Subtracts two vectors.\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param dst - vector to hold result. If not new one is created.\n * @returns A vector that is the difference of a and b.\n */\nfunction subtract$2(a, b, dst) {\n    dst = dst || new VecType$2(2);\n    dst[0] = a[0] - b[0];\n    dst[1] = a[1] - b[1];\n    return dst;\n}\n/**\n * Subtracts two vectors.\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param dst - vector to hold result. If not new one is created.\n * @returns A vector that is the difference of a and b.\n */\nconst sub$2 = subtract$2;\n/**\n * Check if 2 vectors are approximately equal\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @returns true if vectors are approximately equal\n */\nfunction equalsApproximately$4(a, b) {\n    return Math.abs(a[0] - b[0]) < EPSILON &&\n        Math.abs(a[1] - b[1]) < EPSILON;\n}\n/**\n * Check if 2 vectors are exactly equal\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @returns true if vectors are exactly equal\n */\nfunction equals$4(a, b) {\n    return a[0] === b[0] && a[1] === b[1];\n}\n/**\n * Performs linear interpolation on two vectors.\n * Given vectors a and b and interpolation coefficient t, returns\n * a + t * (b - a).\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param t - Interpolation coefficient.\n * @param dst - vector to hold result. If not new one is created.\n * @returns The linear interpolated result.\n */\nfunction lerp$2(a, b, t, dst) {\n    dst = dst || new VecType$2(2);\n    dst[0] = a[0] + t * (b[0] - a[0]);\n    dst[1] = a[1] + t * (b[1] - a[1]);\n    return dst;\n}\n/**\n * Performs linear interpolation on two vectors.\n * Given vectors a and b and interpolation coefficient vector t, returns\n * a + t * (b - a).\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param t - Interpolation coefficients vector.\n * @param dst - vector to hold result. If not new one is created.\n * @returns the linear interpolated result.\n */\nfunction lerpV$2(a, b, t, dst) {\n    dst = dst || new VecType$2(2);\n    dst[0] = a[0] + t[0] * (b[0] - a[0]);\n    dst[1] = a[1] + t[1] * (b[1] - a[1]);\n    return dst;\n}\n/**\n * Return max values of two vectors.\n * Given vectors a and b returns\n * [max(a[0], b[0]), max(a[1], b[1]), max(a[2], b[2])].\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param dst - vector to hold result. If not new one is created.\n * @returns The max components vector.\n */\nfunction max$2(a, b, dst) {\n    dst = dst || new VecType$2(2);\n    dst[0] = Math.max(a[0], b[0]);\n    dst[1] = Math.max(a[1], b[1]);\n    return dst;\n}\n/**\n * Return min values of two vectors.\n * Given vectors a and b returns\n * [min(a[0], b[0]), min(a[1], b[1]), min(a[2], b[2])].\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param dst - vector to hold result. If not new one is created.\n * @returns The min components vector.\n */\nfunction min$2(a, b, dst) {\n    dst = dst || new VecType$2(2);\n    dst[0] = Math.min(a[0], b[0]);\n    dst[1] = Math.min(a[1], b[1]);\n    return dst;\n}\n/**\n * Multiplies a vector by a scalar.\n * @param v - The vector.\n * @param k - The scalar.\n * @param dst - vector to hold result. If not new one is created.\n * @returns The scaled vector.\n */\nfunction mulScalar$2(v, k, dst) {\n    dst = dst || new VecType$2(2);\n    dst[0] = v[0] * k;\n    dst[1] = v[1] * k;\n    return dst;\n}\n/**\n * Multiplies a vector by a scalar. (same as mulScalar)\n * @param v - The vector.\n * @param k - The scalar.\n * @param dst - vector to hold result. If not new one is created.\n * @returns The scaled vector.\n */\nconst scale$4 = mulScalar$2;\n/**\n * Divides a vector by a scalar.\n * @param v - The vector.\n * @param k - The scalar.\n * @param dst - vector to hold result. If not new one is created.\n * @returns The scaled vector.\n */\nfunction divScalar$2(v, k, dst) {\n    dst = dst || new VecType$2(2);\n    dst[0] = v[0] / k;\n    dst[1] = v[1] / k;\n    return dst;\n}\n/**\n * Inverse a vector.\n * @param v - The vector.\n * @param dst - vector to hold result. If not new one is created.\n * @returns The inverted vector.\n */\nfunction inverse$4(v, dst) {\n    dst = dst || new VecType$2(2);\n    dst[0] = 1 / v[0];\n    dst[1] = 1 / v[1];\n    return dst;\n}\n/**\n * Invert a vector. (same as inverse)\n * @param v - The vector.\n * @param dst - vector to hold result. If not new one is created.\n * @returns The inverted vector.\n */\nconst invert$4 = inverse$4;\n/**\n * Computes the cross product of two vectors; assumes both vectors have\n * three entries.\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param dst - vector to hold result. If not new one is created.\n * @returns The vector of a cross b.\n */\nfunction cross$1(a, b, dst) {\n    dst = dst || new VecType$2(3);\n    const z = a[0] * b[1] - a[1] * b[0];\n    dst[0] = 0;\n    dst[1] = 0;\n    dst[2] = z;\n    return dst;\n}\n/**\n * Computes the dot product of two vectors; assumes both vectors have\n * three entries.\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @returns dot product\n */\nfunction dot$2(a, b) {\n    return a[0] * b[0] + a[1] * b[1];\n}\n/**\n * Computes the length of vector\n * @param v - vector.\n * @returns length of vector.\n */\nfunction length$2(v) {\n    const v0 = v[0];\n    const v1 = v[1];\n    return Math.sqrt(v0 * v0 + v1 * v1);\n}\n/**\n * Computes the length of vector (same as length)\n * @param v - vector.\n * @returns length of vector.\n */\nconst len$2 = length$2;\n/**\n * Computes the square of the length of vector\n * @param v - vector.\n * @returns square of the length of vector.\n */\nfunction lengthSq$2(v) {\n    const v0 = v[0];\n    const v1 = v[1];\n    return v0 * v0 + v1 * v1;\n}\n/**\n * Computes the square of the length of vector (same as lengthSq)\n * @param v - vector.\n * @returns square of the length of vector.\n */\nconst lenSq$2 = lengthSq$2;\n/**\n * Computes the distance between 2 points\n * @param a - vector.\n * @param b - vector.\n * @returns distance between a and b\n */\nfunction distance$2(a, b) {\n    const dx = a[0] - b[0];\n    const dy = a[1] - b[1];\n    return Math.sqrt(dx * dx + dy * dy);\n}\n/**\n * Computes the distance between 2 points (same as distance)\n * @param a - vector.\n * @param b - vector.\n * @returns distance between a and b\n */\nconst dist$2 = distance$2;\n/**\n * Computes the square of the distance between 2 points\n * @param a - vector.\n * @param b - vector.\n * @returns square of the distance between a and b\n */\nfunction distanceSq$2(a, b) {\n    const dx = a[0] - b[0];\n    const dy = a[1] - b[1];\n    return dx * dx + dy * dy;\n}\n/**\n * Computes the square of the distance between 2 points (same as distanceSq)\n * @param a - vector.\n * @param b - vector.\n * @returns square of the distance between a and b\n */\nconst distSq$2 = distanceSq$2;\n/**\n * Divides a vector by its Euclidean length and returns the quotient.\n * @param v - The vector.\n * @param dst - vector to hold result. If not new one is created.\n * @returns The normalized vector.\n */\nfunction normalize$2(v, dst) {\n    dst = dst || new VecType$2(2);\n    const v0 = v[0];\n    const v1 = v[1];\n    const len = Math.sqrt(v0 * v0 + v1 * v1);\n    if (len > 0.00001) {\n        dst[0] = v0 / len;\n        dst[1] = v1 / len;\n    }\n    else {\n        dst[0] = 0;\n        dst[1] = 0;\n    }\n    return dst;\n}\n/**\n * Negates a vector.\n * @param v - The vector.\n * @param dst - vector to hold result. If not new one is created.\n * @returns -v.\n */\nfunction negate$4(v, dst) {\n    dst = dst || new VecType$2(2);\n    dst[0] = -v[0];\n    dst[1] = -v[1];\n    return dst;\n}\n/**\n * Copies a vector. (same as clone)\n * @param v - The vector.\n * @param dst - vector to hold result. If not new one is created.\n * @returns A copy of v.\n */\nfunction copy$4(v, dst) {\n    dst = dst || new VecType$2(2);\n    dst[0] = v[0];\n    dst[1] = v[1];\n    return dst;\n}\n/**\n * Clones a vector. (same as copy)\n * @param v - The vector.\n * @param dst - vector to hold result. If not new one is created.\n * @returns A copy of v.\n */\nconst clone$4 = copy$4;\n/**\n * Multiplies a vector by another vector (component-wise); assumes a and\n * b have the same length.\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param dst - vector to hold result. If not new one is created.\n * @returns The vector of products of entries of a and b.\n */\nfunction multiply$4(a, b, dst) {\n    dst = dst || new VecType$2(2);\n    dst[0] = a[0] * b[0];\n    dst[1] = a[1] * b[1];\n    return dst;\n}\n/**\n * Multiplies a vector by another vector (component-wise); assumes a and\n * b have the same length. (same as mul)\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param dst - vector to hold result. If not new one is created.\n * @returns The vector of products of entries of a and b.\n */\nconst mul$4 = multiply$4;\n/**\n * Divides a vector by another vector (component-wise); assumes a and\n * b have the same length.\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param dst - vector to hold result. If not new one is created.\n * @returns The vector of quotients of entries of a and b.\n */\nfunction divide$2(a, b, dst) {\n    dst = dst || new VecType$2(2);\n    dst[0] = a[0] / b[0];\n    dst[1] = a[1] / b[1];\n    return dst;\n}\n/**\n * Divides a vector by another vector (component-wise); assumes a and\n * b have the same length. (same as divide)\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param dst - vector to hold result. If not new one is created.\n * @returns The vector of quotients of entries of a and b.\n */\nconst div$2 = divide$2;\n/**\n * Creates a random unit vector * scale\n * @param scale - Default 1\n * @param dst - vector to hold result. If not new one is created.\n * @returns The random vector.\n */\nfunction random$1(scale = 1, dst) {\n    dst = dst || new VecType$2(2);\n    const angle = Math.random() * 2 * Math.PI;\n    dst[0] = Math.cos(angle) * scale;\n    dst[1] = Math.sin(angle) * scale;\n    return dst;\n}\n/**\n * Zero's a vector\n * @param dst - vector to hold result. If not new one is created.\n * @returns The zeroed vector.\n */\nfunction zero$2(dst) {\n    dst = dst || new VecType$2(2);\n    dst[0] = 0;\n    dst[1] = 0;\n    return dst;\n}\n/**\n * transform Vec2 by 4x4 matrix\n * @param v - the vector\n * @param m - The matrix.\n * @param dst - optional Vec2 to store result. If not passed a new one is created.\n * @returns the transformed vector\n */\nfunction transformMat4$2(v, m, dst) {\n    dst = dst || new VecType$2(2);\n    const x = v[0];\n    const y = v[1];\n    dst[0] = x * m[0] + y * m[4] + m[12];\n    dst[1] = x * m[1] + y * m[5] + m[13];\n    return dst;\n}\n/**\n * Transforms vec4 by 3x3 matrix\n *\n * @param v - the vector\n * @param m - The matrix.\n * @param dst - optional Vec2 to store result. If not passed a new one is created.\n * @returns the transformed vector\n */\nfunction transformMat3$1(v, m, dst) {\n    dst = dst || new VecType$2(2);\n    const x = v[0];\n    const y = v[1];\n    dst[0] = m[0] * x + m[4] * y + m[8];\n    dst[1] = m[1] * x + m[5] * y + m[9];\n    return dst;\n}\n\nvar vec2Impl = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    create: create$4,\n    setDefaultType: setDefaultType$5,\n    fromValues: fromValues$2,\n    ceil: ceil$2,\n    floor: floor$2,\n    round: round$2,\n    clamp: clamp$2,\n    add: add$2,\n    addScaled: addScaled$2,\n    angle: angle$1,\n    subtract: subtract$2,\n    sub: sub$2,\n    equalsApproximately: equalsApproximately$4,\n    equals: equals$4,\n    lerp: lerp$2,\n    lerpV: lerpV$2,\n    max: max$2,\n    min: min$2,\n    mulScalar: mulScalar$2,\n    scale: scale$4,\n    divScalar: divScalar$2,\n    inverse: inverse$4,\n    invert: invert$4,\n    cross: cross$1,\n    dot: dot$2,\n    length: length$2,\n    len: len$2,\n    lengthSq: lengthSq$2,\n    lenSq: lenSq$2,\n    distance: distance$2,\n    dist: dist$2,\n    distanceSq: distanceSq$2,\n    distSq: distSq$2,\n    normalize: normalize$2,\n    negate: negate$4,\n    copy: copy$4,\n    clone: clone$4,\n    multiply: multiply$4,\n    mul: mul$4,\n    divide: divide$2,\n    div: div$2,\n    random: random$1,\n    zero: zero$2,\n    transformMat4: transformMat4$2,\n    transformMat3: transformMat3$1\n});\n\n/*\n * Copyright 2022 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n/**\n * 3x3 Matrix math math functions.\n *\n * Almost all functions take an optional `dst` argument. If it is not passed in the\n * functions will create a new matrix. In other words you can do this\n *\n *     const mat = mat3.translation([1, 2, 3]);  // Creates a new translation matrix\n *\n * or\n *\n *     const mat = mat3.create();\n *     mat3.translation([1, 2, 3], mat);  // Puts translation matrix in mat.\n *\n * The first style is often easier but depending on where it's used it generates garbage where\n * as there is almost never allocation with the second style.\n *\n * It is always save to pass any matrix as the destination. So for example\n *\n *     const mat = mat3.identity();\n *     const trans = mat3.translation([1, 2, 3]);\n *     mat3.multiply(mat, trans, mat);  // Multiplies mat * trans and puts result in mat.\n *\n */\nlet MatType$1 = Float32Array;\n// This mess is because with Mat3 we have 3 unused elements.\n// For Float32Array and Float64Array that's not an issue\n// but for Array it's troublesome\nconst ctorMap = new Map([\n    [Float32Array, () => new Float32Array(12)],\n    [Float64Array, () => new Float64Array(12)],\n    [Array, () => new Array(12).fill(0)],\n]);\nlet newMat3 = ctorMap.get(Float32Array);\n/**\n * Sets the type this library creates for a Mat3\n * @param ctor - the constructor for the type. Either `Float32Array`, 'Float64Array', or `Array`\n * @returns previous constructor for Mat3\n */\nfunction setDefaultType$4(ctor) {\n    const oldType = MatType$1;\n    MatType$1 = ctor;\n    newMat3 = ctorMap.get(ctor);\n    return oldType;\n}\n/**\n * Create a Mat3 from values\n *\n * Note: Since passing in a raw JavaScript array\n * is valid in all circumstances, if you want to\n * force a JavaScript array into a Mat3's specified type\n * it would be faster to use\n *\n * ```\n * const m = mat3.clone(someJSArray);\n * ```\n *\n * Note: a consequence of the implementation is if your Mat3Type = `Array`\n * instead of `Float32Array` or `Float64Array` then any values you\n * don't pass in will be undefined. Usually this is not an issue since\n * (a) using `Array` is rare and (b) using `mat3.create` is usually used\n * to create a Mat3 to be filled out as in\n *\n * ```\n * const m = mat3.create();\n * mat3.perspective(fov, aspect, near, far, m);\n * ```\n *\n * @param v0 - value for element 0\n * @param v1 - value for element 1\n * @param v2 - value for element 2\n * @param v3 - value for element 3\n * @param v4 - value for element 4\n * @param v5 - value for element 5\n * @param v6 - value for element 6\n * @param v7 - value for element 7\n * @param v8 - value for element 8\n * @returns matrix created from values.\n */\nfunction create$3(v0, v1, v2, v3, v4, v5, v6, v7, v8) {\n    const dst = newMat3();\n    // to make the array homogenous\n    dst[3] = 0;\n    dst[7] = 0;\n    dst[11] = 0;\n    if (v0 !== undefined) {\n        dst[0] = v0;\n        if (v1 !== undefined) {\n            dst[1] = v1;\n            if (v2 !== undefined) {\n                dst[2] = v2;\n                if (v3 !== undefined) {\n                    dst[4] = v3;\n                    if (v4 !== undefined) {\n                        dst[5] = v4;\n                        if (v5 !== undefined) {\n                            dst[6] = v5;\n                            if (v6 !== undefined) {\n                                dst[8] = v6;\n                                if (v7 !== undefined) {\n                                    dst[9] = v7;\n                                    if (v8 !== undefined) {\n                                        dst[10] = v8;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n    return dst;\n}\n/**\n * Negates a matrix.\n * @param m - The matrix.\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns -m.\n */\nfunction negate$3(m, dst) {\n    dst = dst || newMat3();\n    dst[0] = -m[0];\n    dst[1] = -m[1];\n    dst[2] = -m[2];\n    dst[4] = -m[4];\n    dst[5] = -m[5];\n    dst[6] = -m[6];\n    dst[8] = -m[8];\n    dst[9] = -m[9];\n    dst[10] = -m[10];\n    return dst;\n}\n/**\n * Copies a matrix.\n * @param m - The matrix.\n * @param dst - The matrix. If not passed a new one is created.\n * @returns A copy of m.\n */\nfunction copy$3(m, dst) {\n    dst = dst || newMat3();\n    dst[0] = m[0];\n    dst[1] = m[1];\n    dst[2] = m[2];\n    dst[4] = m[4];\n    dst[5] = m[5];\n    dst[6] = m[6];\n    dst[8] = m[8];\n    dst[9] = m[9];\n    dst[10] = m[10];\n    return dst;\n}\n/**\n * Copies a matrix (same as copy)\n * @param m - The matrix.\n * @param dst - The matrix. If not passed a new one is created.\n * @returns A copy of m.\n */\nconst clone$3 = copy$3;\n/**\n * Check if 2 matrices are approximately equal\n * @param a Operand matrix.\n * @param b Operand matrix.\n * @returns true if matrices are approximately equal\n */\nfunction equalsApproximately$3(a, b) {\n    return Math.abs(a[0] - b[0]) < EPSILON &&\n        Math.abs(a[1] - b[1]) < EPSILON &&\n        Math.abs(a[2] - b[2]) < EPSILON &&\n        Math.abs(a[4] - b[4]) < EPSILON &&\n        Math.abs(a[5] - b[5]) < EPSILON &&\n        Math.abs(a[6] - b[6]) < EPSILON &&\n        Math.abs(a[8] - b[8]) < EPSILON &&\n        Math.abs(a[9] - b[9]) < EPSILON &&\n        Math.abs(a[10] - b[10]) < EPSILON;\n}\n/**\n * Check if 2 matrices are exactly equal\n * @param a Operand matrix.\n * @param b Operand matrix.\n * @returns true if matrices are exactly equal\n */\nfunction equals$3(a, b) {\n    return a[0] === b[0] &&\n        a[1] === b[1] &&\n        a[2] === b[2] &&\n        a[4] === b[4] &&\n        a[5] === b[5] &&\n        a[6] === b[6] &&\n        a[8] === b[8] &&\n        a[9] === b[9] &&\n        a[10] === b[10];\n}\n/**\n * Creates a 3-by-3 identity matrix.\n *\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns A 3-by-3 identity matrix.\n */\nfunction identity$1(dst) {\n    dst = dst || newMat3();\n    dst[0] = 1;\n    dst[1] = 0;\n    dst[2] = 0;\n    dst[4] = 0;\n    dst[5] = 1;\n    dst[6] = 0;\n    dst[8] = 0;\n    dst[9] = 0;\n    dst[10] = 1;\n    return dst;\n}\n/**\n * Takes the transpose of a matrix.\n * @param m - The matrix.\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The transpose of m.\n */\nfunction transpose$1(m, dst) {\n    dst = dst || newMat3();\n    if (dst === m) {\n        let t;\n        // 0 1 2\n        // 4 5 6\n        // 8 9 10\n        t = m[1];\n        m[1] = m[4];\n        m[4] = t;\n        t = m[2];\n        m[2] = m[8];\n        m[8] = t;\n        t = m[6];\n        m[6] = m[9];\n        m[9] = t;\n        return dst;\n    }\n    const m00 = m[0 * 4 + 0];\n    const m01 = m[0 * 4 + 1];\n    const m02 = m[0 * 4 + 2];\n    const m10 = m[1 * 4 + 0];\n    const m11 = m[1 * 4 + 1];\n    const m12 = m[1 * 4 + 2];\n    const m20 = m[2 * 4 + 0];\n    const m21 = m[2 * 4 + 1];\n    const m22 = m[2 * 4 + 2];\n    dst[0] = m00;\n    dst[1] = m10;\n    dst[2] = m20;\n    dst[4] = m01;\n    dst[5] = m11;\n    dst[6] = m21;\n    dst[8] = m02;\n    dst[9] = m12;\n    dst[10] = m22;\n    return dst;\n}\n/**\n * Computes the inverse of a 3-by-3 matrix.\n * @param m - The matrix.\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The inverse of m.\n */\nfunction inverse$3(m, dst) {\n    dst = dst || newMat3();\n    const m00 = m[0 * 4 + 0];\n    const m01 = m[0 * 4 + 1];\n    const m02 = m[0 * 4 + 2];\n    const m10 = m[1 * 4 + 0];\n    const m11 = m[1 * 4 + 1];\n    const m12 = m[1 * 4 + 2];\n    const m20 = m[2 * 4 + 0];\n    const m21 = m[2 * 4 + 1];\n    const m22 = m[2 * 4 + 2];\n    const m11_x_m22 = m11 * m22;\n    const m21_x_m12 = m21 * m12;\n    const m01_x_m22 = m01 * m22;\n    const m21_x_m02 = m21 * m02;\n    const m01_x_m12 = m01 * m12;\n    const m11_x_m02 = m11 * m02;\n    const invDet = 1 / (m00 * (m11_x_m22 - m21_x_m12) -\n        m10 * (m01_x_m22 - m21_x_m02) +\n        m20 * (m01_x_m12 - m11_x_m02));\n    dst[0] = +(m11_x_m22 - m21_x_m12) * invDet;\n    dst[1] = -(m10 * m22 - m20 * m12) * invDet;\n    dst[2] = +(m10 * m21 - m20 * m11) * invDet;\n    dst[4] = -(m01_x_m22 - m21_x_m02) * invDet;\n    dst[5] = +(m00 * m22 - m20 * m02) * invDet;\n    dst[6] = -(m00 * m21 - m20 * m01) * invDet;\n    dst[8] = +(m01_x_m12 - m11_x_m02) * invDet;\n    dst[9] = -(m00 * m12 - m10 * m02) * invDet;\n    dst[10] = +(m00 * m11 - m10 * m01) * invDet;\n    return dst;\n}\n/**\n * Compute the determinant of a matrix\n * @param m - the matrix\n * @returns the determinant\n */\nfunction determinant$1(m) {\n    const m00 = m[0 * 4 + 0];\n    const m01 = m[0 * 4 + 1];\n    const m02 = m[0 * 4 + 2];\n    const m10 = m[1 * 4 + 0];\n    const m11 = m[1 * 4 + 1];\n    const m12 = m[1 * 4 + 2];\n    const m20 = m[2 * 4 + 0];\n    const m21 = m[2 * 4 + 1];\n    const m22 = m[2 * 4 + 2];\n    return m00 * (m11 * m22 - m21 * m12) -\n        m10 * (m01 * m22 - m21 * m02) +\n        m20 * (m01 * m12 - m11 * m02);\n}\n/**\n * Computes the inverse of a 3-by-3 matrix. (same as inverse)\n * @param m - The matrix.\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The inverse of m.\n */\nconst invert$3 = inverse$3;\n/**\n * Multiplies two 3-by-3 matrices with a on the left and b on the right\n * @param a - The matrix on the left.\n * @param b - The matrix on the right.\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The matrix product of a and b.\n */\nfunction multiply$3(a, b, dst) {\n    dst = dst || newMat3();\n    const a00 = a[0];\n    const a01 = a[1];\n    const a02 = a[2];\n    const a10 = a[4 + 0];\n    const a11 = a[4 + 1];\n    const a12 = a[4 + 2];\n    const a20 = a[8 + 0];\n    const a21 = a[8 + 1];\n    const a22 = a[8 + 2];\n    const b00 = b[0];\n    const b01 = b[1];\n    const b02 = b[2];\n    const b10 = b[4 + 0];\n    const b11 = b[4 + 1];\n    const b12 = b[4 + 2];\n    const b20 = b[8 + 0];\n    const b21 = b[8 + 1];\n    const b22 = b[8 + 2];\n    dst[0] = a00 * b00 + a10 * b01 + a20 * b02;\n    dst[1] = a01 * b00 + a11 * b01 + a21 * b02;\n    dst[2] = a02 * b00 + a12 * b01 + a22 * b02;\n    dst[4] = a00 * b10 + a10 * b11 + a20 * b12;\n    dst[5] = a01 * b10 + a11 * b11 + a21 * b12;\n    dst[6] = a02 * b10 + a12 * b11 + a22 * b12;\n    dst[8] = a00 * b20 + a10 * b21 + a20 * b22;\n    dst[9] = a01 * b20 + a11 * b21 + a21 * b22;\n    dst[10] = a02 * b20 + a12 * b21 + a22 * b22;\n    return dst;\n}\n/**\n * Multiplies two 3-by-3 matrices with a on the left and b on the right (same as multiply)\n * @param a - The matrix on the left.\n * @param b - The matrix on the right.\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The matrix product of a and b.\n */\nconst mul$3 = multiply$3;\n/**\n * Sets the translation component of a 3-by-3 matrix to the given\n * vector.\n * @param a - The matrix.\n * @param v - The vector.\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The matrix with translation set.\n */\nfunction setTranslation$1(a, v, dst) {\n    dst = dst || identity$1();\n    if (a !== dst) {\n        dst[0] = a[0];\n        dst[1] = a[1];\n        dst[2] = a[2];\n        dst[4] = a[4];\n        dst[5] = a[5];\n        dst[6] = a[6];\n    }\n    dst[8] = v[0];\n    dst[9] = v[1];\n    dst[10] = 1;\n    return dst;\n}\n/**\n * Returns the translation component of a 3-by-3 matrix as a vector with 3\n * entries.\n * @param m - The matrix.\n * @param dst - vector to hold result. If not passed a new one is created.\n * @returns The translation component of m.\n */\nfunction getTranslation$1(m, dst) {\n    dst = dst || create$4();\n    dst[0] = m[8];\n    dst[1] = m[9];\n    return dst;\n}\n/**\n * Returns an axis of a 3x3 matrix as a vector with 2 entries\n * @param m - The matrix.\n * @param axis - The axis 0 = x, 1 = y,\n * @returns The axis component of m.\n */\nfunction getAxis$1(m, axis, dst) {\n    dst = dst || create$4();\n    const off = axis * 4;\n    dst[0] = m[off + 0];\n    dst[1] = m[off + 1];\n    return dst;\n}\n/**\n * Sets an axis of a 3x3 matrix as a vector with 2 entries\n * @param m - The matrix.\n * @param v - the axis vector\n * @param axis - The axis  0 = x, 1 = y;\n * @param dst - The matrix to set. If not passed a new one is created.\n * @returns The matrix with axis set.\n */\nfunction setAxis$1(m, v, axis, dst) {\n    if (dst !== m) {\n        dst = copy$3(m, dst);\n    }\n    const off = axis * 4;\n    dst[off + 0] = v[0];\n    dst[off + 1] = v[1];\n    return dst;\n}\n/**\n * Returns the scaling component of the matrix\n * @param m - The Matrix\n * @param dst - The vector to set. If not passed a new one is created.\n */\nfunction getScaling$1(m, dst) {\n    dst = dst || create$4();\n    const xx = m[0];\n    const xy = m[1];\n    const yx = m[4];\n    const yy = m[5];\n    dst[0] = Math.sqrt(xx * xx + xy * xy);\n    dst[1] = Math.sqrt(yx * yx + yy * yy);\n    return dst;\n}\n/**\n * Creates a 3-by-3 matrix which translates by the given vector v.\n * @param v - The vector by which to translate.\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The translation matrix.\n */\nfunction translation$1(v, dst) {\n    dst = dst || newMat3();\n    dst[0] = 1;\n    dst[1] = 0;\n    dst[2] = 0;\n    dst[4] = 0;\n    dst[5] = 1;\n    dst[6] = 0;\n    dst[8] = v[0];\n    dst[9] = v[1];\n    dst[10] = 1;\n    return dst;\n}\n/**\n * Translates the given 3-by-3 matrix by the given vector v.\n * @param m - The matrix.\n * @param v - The vector by which to translate.\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The translated matrix.\n */\nfunction translate$1(m, v, dst) {\n    dst = dst || newMat3();\n    const v0 = v[0];\n    const v1 = v[1];\n    const m00 = m[0];\n    const m01 = m[1];\n    const m02 = m[2];\n    const m10 = m[1 * 4 + 0];\n    const m11 = m[1 * 4 + 1];\n    const m12 = m[1 * 4 + 2];\n    const m20 = m[2 * 4 + 0];\n    const m21 = m[2 * 4 + 1];\n    const m22 = m[2 * 4 + 2];\n    if (m !== dst) {\n        dst[0] = m00;\n        dst[1] = m01;\n        dst[2] = m02;\n        dst[4] = m10;\n        dst[5] = m11;\n        dst[6] = m12;\n    }\n    dst[8] = m00 * v0 + m10 * v1 + m20;\n    dst[9] = m01 * v0 + m11 * v1 + m21;\n    dst[10] = m02 * v0 + m12 * v1 + m22;\n    return dst;\n}\n/**\n * Creates a 3-by-3 matrix which rotates  by the given angle.\n * @param angleInRadians - The angle by which to rotate (in radians).\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The rotation matrix.\n */\nfunction rotation$1(angleInRadians, dst) {\n    dst = dst || newMat3();\n    const c = Math.cos(angleInRadians);\n    const s = Math.sin(angleInRadians);\n    dst[0] = c;\n    dst[1] = s;\n    dst[2] = 0;\n    dst[4] = -s;\n    dst[5] = c;\n    dst[6] = 0;\n    dst[8] = 0;\n    dst[9] = 0;\n    dst[10] = 1;\n    return dst;\n}\n/**\n * Rotates the given 3-by-3 matrix  by the given angle.\n * @param m - The matrix.\n * @param angleInRadians - The angle by which to rotate (in radians).\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The rotated matrix.\n */\nfunction rotate$1(m, angleInRadians, dst) {\n    dst = dst || newMat3();\n    const m00 = m[0 * 4 + 0];\n    const m01 = m[0 * 4 + 1];\n    const m02 = m[0 * 4 + 2];\n    const m10 = m[1 * 4 + 0];\n    const m11 = m[1 * 4 + 1];\n    const m12 = m[1 * 4 + 2];\n    const c = Math.cos(angleInRadians);\n    const s = Math.sin(angleInRadians);\n    dst[0] = c * m00 + s * m10;\n    dst[1] = c * m01 + s * m11;\n    dst[2] = c * m02 + s * m12;\n    dst[4] = c * m10 - s * m00;\n    dst[5] = c * m11 - s * m01;\n    dst[6] = c * m12 - s * m02;\n    if (m !== dst) {\n        dst[8] = m[8];\n        dst[9] = m[9];\n        dst[10] = m[10];\n    }\n    return dst;\n}\n/**\n * Creates a 3-by-3 matrix which scales in each dimension by an amount given by\n * the corresponding entry in the given vector; assumes the vector has three\n * entries.\n * @param v - A vector of\n *     2 entries specifying the factor by which to scale in each dimension.\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The scaling matrix.\n */\nfunction scaling$1(v, dst) {\n    dst = dst || newMat3();\n    dst[0] = v[0];\n    dst[1] = 0;\n    dst[2] = 0;\n    dst[4] = 0;\n    dst[5] = v[1];\n    dst[6] = 0;\n    dst[8] = 0;\n    dst[9] = 0;\n    dst[10] = 1;\n    return dst;\n}\n/**\n * Scales the given 3-by-3 matrix in each dimension by an amount\n * given by the corresponding entry in the given vector; assumes the vector has\n * three entries.\n * @param m - The matrix to be modified.\n * @param v - A vector of 2 entries specifying the\n *     factor by which to scale in each dimension.\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The scaled matrix.\n */\nfunction scale$3(m, v, dst) {\n    dst = dst || newMat3();\n    const v0 = v[0];\n    const v1 = v[1];\n    dst[0] = v0 * m[0 * 4 + 0];\n    dst[1] = v0 * m[0 * 4 + 1];\n    dst[2] = v0 * m[0 * 4 + 2];\n    dst[4] = v1 * m[1 * 4 + 0];\n    dst[5] = v1 * m[1 * 4 + 1];\n    dst[6] = v1 * m[1 * 4 + 2];\n    if (m !== dst) {\n        dst[8] = m[8];\n        dst[9] = m[9];\n        dst[10] = m[10];\n    }\n    return dst;\n}\n\nvar mat3Impl = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    setDefaultType: setDefaultType$4,\n    create: create$3,\n    negate: negate$3,\n    copy: copy$3,\n    clone: clone$3,\n    equalsApproximately: equalsApproximately$3,\n    equals: equals$3,\n    identity: identity$1,\n    transpose: transpose$1,\n    inverse: inverse$3,\n    determinant: determinant$1,\n    invert: invert$3,\n    multiply: multiply$3,\n    mul: mul$3,\n    setTranslation: setTranslation$1,\n    getTranslation: getTranslation$1,\n    getAxis: getAxis$1,\n    setAxis: setAxis$1,\n    getScaling: getScaling$1,\n    translation: translation$1,\n    translate: translate$1,\n    rotation: rotation$1,\n    rotate: rotate$1,\n    scaling: scaling$1,\n    scale: scale$3\n});\n\n/**\n *\n * Vec3 math functions.\n *\n * Almost all functions take an optional `dst` argument. If it is not passed in the\n * functions will create a new `Vec3`. In other words you can do this\n *\n *     const v = vec3.cross(v1, v2);  // Creates a new Vec3 with the cross product of v1 x v2.\n *\n * or\n *\n *     const v = vec3.create();\n *     vec3.cross(v1, v2, v);  // Puts the cross product of v1 x v2 in v\n *\n * The first style is often easier but depending on where it's used it generates garbage where\n * as there is almost never allocation with the second style.\n *\n * It is always safe to pass any vector as the destination. So for example\n *\n *     vec3.cross(v1, v2, v1);  // Puts the cross product of v1 x v2 in v1\n *\n */\nlet VecType$1 = Float32Array;\n/**\n * Sets the type this library creates for a Vec3\n * @param ctor - the constructor for the type. Either `Float32Array`, 'Float64Array', or `Array`\n * @returns previous constructor for Vec3\n */\nfunction setDefaultType$3(ctor) {\n    const oldType = VecType$1;\n    VecType$1 = ctor;\n    return oldType;\n}\n/**\n * Creates a vec3; may be called with x, y, z to set initial values.\n * @param x - Initial x value.\n * @param y - Initial y value.\n * @param z - Initial z value.\n * @returns the created vector\n */\nfunction create$2(x, y, z) {\n    const dst = new VecType$1(3);\n    if (x !== undefined) {\n        dst[0] = x;\n        if (y !== undefined) {\n            dst[1] = y;\n            if (z !== undefined) {\n                dst[2] = z;\n            }\n        }\n    }\n    return dst;\n}\n\n/*\n * Copyright 2022 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n/**\n * Creates a vec3; may be called with x, y, z to set initial values. (same as create)\n * @param x - Initial x value.\n * @param y - Initial y value.\n * @param z - Initial z value.\n * @returns the created vector\n */\nconst fromValues$1 = create$2;\n/**\n * Applies Math.ceil to each element of vector\n * @param v - Operand vector.\n * @param dst - vector to hold result. If not new one is created.\n * @returns A vector that is the ceil of each element of v.\n */\nfunction ceil$1(v, dst) {\n    dst = dst || new VecType$1(3);\n    dst[0] = Math.ceil(v[0]);\n    dst[1] = Math.ceil(v[1]);\n    dst[2] = Math.ceil(v[2]);\n    return dst;\n}\n/**\n * Applies Math.floor to each element of vector\n * @param v - Operand vector.\n * @param dst - vector to hold result. If not new one is created.\n * @returns A vector that is the floor of each element of v.\n */\nfunction floor$1(v, dst) {\n    dst = dst || new VecType$1(3);\n    dst[0] = Math.floor(v[0]);\n    dst[1] = Math.floor(v[1]);\n    dst[2] = Math.floor(v[2]);\n    return dst;\n}\n/**\n * Applies Math.round to each element of vector\n * @param v - Operand vector.\n * @param dst - vector to hold result. If not new one is created.\n * @returns A vector that is the round of each element of v.\n */\nfunction round$1(v, dst) {\n    dst = dst || new VecType$1(3);\n    dst[0] = Math.round(v[0]);\n    dst[1] = Math.round(v[1]);\n    dst[2] = Math.round(v[2]);\n    return dst;\n}\n/**\n * Clamp each element of vector between min and max\n * @param v - Operand vector.\n * @param max - Min value, default 0\n * @param min - Max value, default 1\n * @param dst - vector to hold result. If not new one is created.\n * @returns A vector that the clamped value of each element of v.\n */\nfunction clamp$1(v, min = 0, max = 1, dst) {\n    dst = dst || new VecType$1(3);\n    dst[0] = Math.min(max, Math.max(min, v[0]));\n    dst[1] = Math.min(max, Math.max(min, v[1]));\n    dst[2] = Math.min(max, Math.max(min, v[2]));\n    return dst;\n}\n/**\n * Adds two vectors; assumes a and b have the same dimension.\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param dst - vector to hold result. If not new one is created.\n * @returns A vector that is the sum of a and b.\n */\nfunction add$1(a, b, dst) {\n    dst = dst || new VecType$1(3);\n    dst[0] = a[0] + b[0];\n    dst[1] = a[1] + b[1];\n    dst[2] = a[2] + b[2];\n    return dst;\n}\n/**\n * Adds two vectors, scaling the 2nd; assumes a and b have the same dimension.\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param scale - Amount to scale b\n * @param dst - vector to hold result. If not new one is created.\n * @returns A vector that is the sum of a + b * scale.\n */\nfunction addScaled$1(a, b, scale, dst) {\n    dst = dst || new VecType$1(3);\n    dst[0] = a[0] + b[0] * scale;\n    dst[1] = a[1] + b[1] * scale;\n    dst[2] = a[2] + b[2] * scale;\n    return dst;\n}\n/**\n * Returns the angle in radians between two vectors.\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @returns The angle in radians between the 2 vectors.\n */\nfunction angle(a, b) {\n    const ax = a[0];\n    const ay = a[1];\n    const az = a[2];\n    const bx = a[0];\n    const by = a[1];\n    const bz = a[2];\n    const mag1 = Math.sqrt(ax * ax + ay * ay + az * az);\n    const mag2 = Math.sqrt(bx * bx + by * by + bz * bz);\n    const mag = mag1 * mag2;\n    const cosine = mag && dot$1(a, b) / mag;\n    return Math.acos(cosine);\n}\n/**\n * Subtracts two vectors.\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param dst - vector to hold result. If not new one is created.\n * @returns A vector that is the difference of a and b.\n */\nfunction subtract$1(a, b, dst) {\n    dst = dst || new VecType$1(3);\n    dst[0] = a[0] - b[0];\n    dst[1] = a[1] - b[1];\n    dst[2] = a[2] - b[2];\n    return dst;\n}\n/**\n * Subtracts two vectors.\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param dst - vector to hold result. If not new one is created.\n * @returns A vector that is the difference of a and b.\n */\nconst sub$1 = subtract$1;\n/**\n * Check if 2 vectors are approximately equal\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @returns true if vectors are approximately equal\n */\nfunction equalsApproximately$2(a, b) {\n    return Math.abs(a[0] - b[0]) < EPSILON &&\n        Math.abs(a[1] - b[1]) < EPSILON &&\n        Math.abs(a[2] - b[2]) < EPSILON;\n}\n/**\n * Check if 2 vectors are exactly equal\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @returns true if vectors are exactly equal\n */\nfunction equals$2(a, b) {\n    return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\n}\n/**\n * Performs linear interpolation on two vectors.\n * Given vectors a and b and interpolation coefficient t, returns\n * a + t * (b - a).\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param t - Interpolation coefficient.\n * @param dst - vector to hold result. If not new one is created.\n * @returns The linear interpolated result.\n */\nfunction lerp$1(a, b, t, dst) {\n    dst = dst || new VecType$1(3);\n    dst[0] = a[0] + t * (b[0] - a[0]);\n    dst[1] = a[1] + t * (b[1] - a[1]);\n    dst[2] = a[2] + t * (b[2] - a[2]);\n    return dst;\n}\n/**\n * Performs linear interpolation on two vectors.\n * Given vectors a and b and interpolation coefficient vector t, returns\n * a + t * (b - a).\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param t - Interpolation coefficients vector.\n * @param dst - vector to hold result. If not new one is created.\n * @returns the linear interpolated result.\n */\nfunction lerpV$1(a, b, t, dst) {\n    dst = dst || new VecType$1(3);\n    dst[0] = a[0] + t[0] * (b[0] - a[0]);\n    dst[1] = a[1] + t[1] * (b[1] - a[1]);\n    dst[2] = a[2] + t[2] * (b[2] - a[2]);\n    return dst;\n}\n/**\n * Return max values of two vectors.\n * Given vectors a and b returns\n * [max(a[0], b[0]), max(a[1], b[1]), max(a[2], b[2])].\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param dst - vector to hold result. If not new one is created.\n * @returns The max components vector.\n */\nfunction max$1(a, b, dst) {\n    dst = dst || new VecType$1(3);\n    dst[0] = Math.max(a[0], b[0]);\n    dst[1] = Math.max(a[1], b[1]);\n    dst[2] = Math.max(a[2], b[2]);\n    return dst;\n}\n/**\n * Return min values of two vectors.\n * Given vectors a and b returns\n * [min(a[0], b[0]), min(a[1], b[1]), min(a[2], b[2])].\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param dst - vector to hold result. If not new one is created.\n * @returns The min components vector.\n */\nfunction min$1(a, b, dst) {\n    dst = dst || new VecType$1(3);\n    dst[0] = Math.min(a[0], b[0]);\n    dst[1] = Math.min(a[1], b[1]);\n    dst[2] = Math.min(a[2], b[2]);\n    return dst;\n}\n/**\n * Multiplies a vector by a scalar.\n * @param v - The vector.\n * @param k - The scalar.\n * @param dst - vector to hold result. If not new one is created.\n * @returns The scaled vector.\n */\nfunction mulScalar$1(v, k, dst) {\n    dst = dst || new VecType$1(3);\n    dst[0] = v[0] * k;\n    dst[1] = v[1] * k;\n    dst[2] = v[2] * k;\n    return dst;\n}\n/**\n * Multiplies a vector by a scalar. (same as mulScalar)\n * @param v - The vector.\n * @param k - The scalar.\n * @param dst - vector to hold result. If not new one is created.\n * @returns The scaled vector.\n */\nconst scale$2 = mulScalar$1;\n/**\n * Divides a vector by a scalar.\n * @param v - The vector.\n * @param k - The scalar.\n * @param dst - vector to hold result. If not new one is created.\n * @returns The scaled vector.\n */\nfunction divScalar$1(v, k, dst) {\n    dst = dst || new VecType$1(3);\n    dst[0] = v[0] / k;\n    dst[1] = v[1] / k;\n    dst[2] = v[2] / k;\n    return dst;\n}\n/**\n * Inverse a vector.\n * @param v - The vector.\n * @param dst - vector to hold result. If not new one is created.\n * @returns The inverted vector.\n */\nfunction inverse$2(v, dst) {\n    dst = dst || new VecType$1(3);\n    dst[0] = 1 / v[0];\n    dst[1] = 1 / v[1];\n    dst[2] = 1 / v[2];\n    return dst;\n}\n/**\n * Invert a vector. (same as inverse)\n * @param v - The vector.\n * @param dst - vector to hold result. If not new one is created.\n * @returns The inverted vector.\n */\nconst invert$2 = inverse$2;\n/**\n * Computes the cross product of two vectors; assumes both vectors have\n * three entries.\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param dst - vector to hold result. If not new one is created.\n * @returns The vector of a cross b.\n */\nfunction cross(a, b, dst) {\n    dst = dst || new VecType$1(3);\n    const t1 = a[2] * b[0] - a[0] * b[2];\n    const t2 = a[0] * b[1] - a[1] * b[0];\n    dst[0] = a[1] * b[2] - a[2] * b[1];\n    dst[1] = t1;\n    dst[2] = t2;\n    return dst;\n}\n/**\n * Computes the dot product of two vectors; assumes both vectors have\n * three entries.\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @returns dot product\n */\nfunction dot$1(a, b) {\n    return (a[0] * b[0]) + (a[1] * b[1]) + (a[2] * b[2]);\n}\n/**\n * Computes the length of vector\n * @param v - vector.\n * @returns length of vector.\n */\nfunction length$1(v) {\n    const v0 = v[0];\n    const v1 = v[1];\n    const v2 = v[2];\n    return Math.sqrt(v0 * v0 + v1 * v1 + v2 * v2);\n}\n/**\n * Computes the length of vector (same as length)\n * @param v - vector.\n * @returns length of vector.\n */\nconst len$1 = length$1;\n/**\n * Computes the square of the length of vector\n * @param v - vector.\n * @returns square of the length of vector.\n */\nfunction lengthSq$1(v) {\n    const v0 = v[0];\n    const v1 = v[1];\n    const v2 = v[2];\n    return v0 * v0 + v1 * v1 + v2 * v2;\n}\n/**\n * Computes the square of the length of vector (same as lengthSq)\n * @param v - vector.\n * @returns square of the length of vector.\n */\nconst lenSq$1 = lengthSq$1;\n/**\n * Computes the distance between 2 points\n * @param a - vector.\n * @param b - vector.\n * @returns distance between a and b\n */\nfunction distance$1(a, b) {\n    const dx = a[0] - b[0];\n    const dy = a[1] - b[1];\n    const dz = a[2] - b[2];\n    return Math.sqrt(dx * dx + dy * dy + dz * dz);\n}\n/**\n * Computes the distance between 2 points (same as distance)\n * @param a - vector.\n * @param b - vector.\n * @returns distance between a and b\n */\nconst dist$1 = distance$1;\n/**\n * Computes the square of the distance between 2 points\n * @param a - vector.\n * @param b - vector.\n * @returns square of the distance between a and b\n */\nfunction distanceSq$1(a, b) {\n    const dx = a[0] - b[0];\n    const dy = a[1] - b[1];\n    const dz = a[2] - b[2];\n    return dx * dx + dy * dy + dz * dz;\n}\n/**\n * Computes the square of the distance between 2 points (same as distanceSq)\n * @param a - vector.\n * @param b - vector.\n * @returns square of the distance between a and b\n */\nconst distSq$1 = distanceSq$1;\n/**\n * Divides a vector by its Euclidean length and returns the quotient.\n * @param v - The vector.\n * @param dst - vector to hold result. If not new one is created.\n * @returns The normalized vector.\n */\nfunction normalize$1(v, dst) {\n    dst = dst || new VecType$1(3);\n    const v0 = v[0];\n    const v1 = v[1];\n    const v2 = v[2];\n    const len = Math.sqrt(v0 * v0 + v1 * v1 + v2 * v2);\n    if (len > 0.00001) {\n        dst[0] = v0 / len;\n        dst[1] = v1 / len;\n        dst[2] = v2 / len;\n    }\n    else {\n        dst[0] = 0;\n        dst[1] = 0;\n        dst[2] = 0;\n    }\n    return dst;\n}\n/**\n * Negates a vector.\n * @param v - The vector.\n * @param dst - vector to hold result. If not new one is created.\n * @returns -v.\n */\nfunction negate$2(v, dst) {\n    dst = dst || new VecType$1(3);\n    dst[0] = -v[0];\n    dst[1] = -v[1];\n    dst[2] = -v[2];\n    return dst;\n}\n/**\n * Copies a vector. (same as clone)\n * @param v - The vector.\n * @param dst - vector to hold result. If not new one is created.\n * @returns A copy of v.\n */\nfunction copy$2(v, dst) {\n    dst = dst || new VecType$1(3);\n    dst[0] = v[0];\n    dst[1] = v[1];\n    dst[2] = v[2];\n    return dst;\n}\n/**\n * Clones a vector. (same as copy)\n * @param v - The vector.\n * @param dst - vector to hold result. If not new one is created.\n * @returns A copy of v.\n */\nconst clone$2 = copy$2;\n/**\n * Multiplies a vector by another vector (component-wise); assumes a and\n * b have the same length.\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param dst - vector to hold result. If not new one is created.\n * @returns The vector of products of entries of a and b.\n */\nfunction multiply$2(a, b, dst) {\n    dst = dst || new VecType$1(3);\n    dst[0] = a[0] * b[0];\n    dst[1] = a[1] * b[1];\n    dst[2] = a[2] * b[2];\n    return dst;\n}\n/**\n * Multiplies a vector by another vector (component-wise); assumes a and\n * b have the same length. (same as mul)\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param dst - vector to hold result. If not new one is created.\n * @returns The vector of products of entries of a and b.\n */\nconst mul$2 = multiply$2;\n/**\n * Divides a vector by another vector (component-wise); assumes a and\n * b have the same length.\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param dst - vector to hold result. If not new one is created.\n * @returns The vector of quotients of entries of a and b.\n */\nfunction divide$1(a, b, dst) {\n    dst = dst || new VecType$1(3);\n    dst[0] = a[0] / b[0];\n    dst[1] = a[1] / b[1];\n    dst[2] = a[2] / b[2];\n    return dst;\n}\n/**\n * Divides a vector by another vector (component-wise); assumes a and\n * b have the same length. (same as divide)\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param dst - vector to hold result. If not new one is created.\n * @returns The vector of quotients of entries of a and b.\n */\nconst div$1 = divide$1;\n/**\n * Creates a random vector\n * @param scale - Default 1\n * @param dst - vector to hold result. If not new one is created.\n * @returns The random vector.\n */\nfunction random(scale = 1, dst) {\n    dst = dst || new VecType$1(3);\n    const angle = Math.random() * 2 * Math.PI;\n    const z = Math.random() * 2 - 1;\n    const zScale = Math.sqrt(1 - z * z) * scale;\n    dst[0] = Math.cos(angle) * zScale;\n    dst[1] = Math.sin(angle) * zScale;\n    dst[2] = z * scale;\n    return dst;\n}\n/**\n * Zero's a vector\n * @param dst - vector to hold result. If not new one is created.\n * @returns The zeroed vector.\n */\nfunction zero$1(dst) {\n    dst = dst || new VecType$1(3);\n    dst[0] = 0;\n    dst[1] = 0;\n    dst[2] = 0;\n    return dst;\n}\n/**\n * transform vec3 by 4x4 matrix\n * @param v - the vector\n * @param m - The matrix.\n * @param dst - optional vec3 to store result. If not passed a new one is created.\n * @returns the transformed vector\n */\nfunction transformMat4$1(v, m, dst) {\n    dst = dst || new VecType$1(3);\n    const x = v[0];\n    const y = v[1];\n    const z = v[2];\n    const w = (m[3] * x + m[7] * y + m[11] * z + m[15]) || 1;\n    dst[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\n    dst[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\n    dst[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\n    return dst;\n}\n/**\n * Transform vec4 by upper 3x3 matrix inside 4x4 matrix.\n * @param v - The direction.\n * @param m - The matrix.\n * @param dst - optional Vec3 to store result. If not passed a new one is created.\n * @returns The transformed vector.\n */\nfunction transformMat4Upper3x3(v, m, dst) {\n    dst = dst || new VecType$1(3);\n    const v0 = v[0];\n    const v1 = v[1];\n    const v2 = v[2];\n    dst[0] = v0 * m[0 * 4 + 0] + v1 * m[1 * 4 + 0] + v2 * m[2 * 4 + 0];\n    dst[1] = v0 * m[0 * 4 + 1] + v1 * m[1 * 4 + 1] + v2 * m[2 * 4 + 1];\n    dst[2] = v0 * m[0 * 4 + 2] + v1 * m[1 * 4 + 2] + v2 * m[2 * 4 + 2];\n    return dst;\n}\n/**\n * Transforms vec4 by 3x3 matrix\n *\n * @param v - the vector\n * @param m - The matrix.\n * @param dst - optional vec3 to store result. If not passed a new one is created.\n * @returns the transformed vector\n */\nfunction transformMat3(v, m, dst) {\n    dst = dst || new VecType$1(3);\n    const x = v[0];\n    const y = v[1];\n    const z = v[2];\n    dst[0] = x * m[0] + y * m[4] + z * m[8];\n    dst[1] = x * m[1] + y * m[5] + z * m[9];\n    dst[2] = x * m[2] + y * m[6] + z * m[10];\n    return dst;\n}\n\nvar vec3Impl = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    create: create$2,\n    setDefaultType: setDefaultType$3,\n    fromValues: fromValues$1,\n    ceil: ceil$1,\n    floor: floor$1,\n    round: round$1,\n    clamp: clamp$1,\n    add: add$1,\n    addScaled: addScaled$1,\n    angle: angle,\n    subtract: subtract$1,\n    sub: sub$1,\n    equalsApproximately: equalsApproximately$2,\n    equals: equals$2,\n    lerp: lerp$1,\n    lerpV: lerpV$1,\n    max: max$1,\n    min: min$1,\n    mulScalar: mulScalar$1,\n    scale: scale$2,\n    divScalar: divScalar$1,\n    inverse: inverse$2,\n    invert: invert$2,\n    cross: cross,\n    dot: dot$1,\n    length: length$1,\n    len: len$1,\n    lengthSq: lengthSq$1,\n    lenSq: lenSq$1,\n    distance: distance$1,\n    dist: dist$1,\n    distanceSq: distanceSq$1,\n    distSq: distSq$1,\n    normalize: normalize$1,\n    negate: negate$2,\n    copy: copy$2,\n    clone: clone$2,\n    multiply: multiply$2,\n    mul: mul$2,\n    divide: divide$1,\n    div: div$1,\n    random: random,\n    zero: zero$1,\n    transformMat4: transformMat4$1,\n    transformMat4Upper3x3: transformMat4Upper3x3,\n    transformMat3: transformMat3\n});\n\n/**\n * 4x4 Matrix math math functions.\n *\n * Almost all functions take an optional `dst` argument. If it is not passed in the\n * functions will create a new matrix. In other words you can do this\n *\n *     const mat = mat4.translation([1, 2, 3]);  // Creates a new translation matrix\n *\n * or\n *\n *     const mat = mat4.create();\n *     mat4.translation([1, 2, 3], mat);  // Puts translation matrix in mat.\n *\n * The first style is often easier but depending on where it's used it generates garbage where\n * as there is almost never allocation with the second style.\n *\n * It is always save to pass any matrix as the destination. So for example\n *\n *     const mat = mat4.identity();\n *     const trans = mat4.translation([1, 2, 3]);\n *     mat4.multiply(mat, trans, mat);  // Multiplies mat * trans and puts result in mat.\n *\n */\nlet MatType = Float32Array;\n/**\n * Sets the type this library creates for a Mat4\n * @param ctor - the constructor for the type. Either `Float32Array`, 'Float64Array', or `Array`\n * @returns previous constructor for Mat4\n */\nfunction setDefaultType$2(ctor) {\n    const oldType = MatType;\n    MatType = ctor;\n    return oldType;\n}\n/**\n * Create a Mat4 from values\n *\n * Note: Since passing in a raw JavaScript array\n * is valid in all circumstances, if you want to\n * force a JavaScript array into a Mat4's specified type\n * it would be faster to use\n *\n * ```\n * const m = mat4.clone(someJSArray);\n * ```\n *\n * Note: a consequence of the implementation is if your Mat4Type = `Array`\n * instead of `Float32Array` or `Float64Array` then any values you\n * don't pass in will be undefined. Usually this is not an issue since\n * (a) using `Array` is rare and (b) using `mat4.create` is usually used\n * to create a Mat4 to be filled out as in\n *\n * ```\n * const m = mat4.create();\n * mat4.perspective(fov, aspect, near, far, m);\n * ```\n *\n * @param v0 - value for element 0\n * @param v1 - value for element 1\n * @param v2 - value for element 2\n * @param v3 - value for element 3\n * @param v4 - value for element 4\n * @param v5 - value for element 5\n * @param v6 - value for element 6\n * @param v7 - value for element 7\n * @param v8 - value for element 8\n * @param v9 - value for element 9\n * @param v10 - value for element 10\n * @param v11 - value for element 11\n * @param v12 - value for element 12\n * @param v13 - value for element 13\n * @param v14 - value for element 14\n * @param v15 - value for element 15\n * @returns created from values.\n */\nfunction create$1(v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15) {\n    const dst = new MatType(16);\n    if (v0 !== undefined) {\n        dst[0] = v0;\n        if (v1 !== undefined) {\n            dst[1] = v1;\n            if (v2 !== undefined) {\n                dst[2] = v2;\n                if (v3 !== undefined) {\n                    dst[3] = v3;\n                    if (v4 !== undefined) {\n                        dst[4] = v4;\n                        if (v5 !== undefined) {\n                            dst[5] = v5;\n                            if (v6 !== undefined) {\n                                dst[6] = v6;\n                                if (v7 !== undefined) {\n                                    dst[7] = v7;\n                                    if (v8 !== undefined) {\n                                        dst[8] = v8;\n                                        if (v9 !== undefined) {\n                                            dst[9] = v9;\n                                            if (v10 !== undefined) {\n                                                dst[10] = v10;\n                                                if (v11 !== undefined) {\n                                                    dst[11] = v11;\n                                                    if (v12 !== undefined) {\n                                                        dst[12] = v12;\n                                                        if (v13 !== undefined) {\n                                                            dst[13] = v13;\n                                                            if (v14 !== undefined) {\n                                                                dst[14] = v14;\n                                                                if (v15 !== undefined) {\n                                                                    dst[15] = v15;\n                                                                }\n                                                            }\n                                                        }\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n    return dst;\n}\n/**\n * Negates a matrix.\n * @param m - The matrix.\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns -m.\n */\nfunction negate$1(m, dst) {\n    dst = dst || new MatType(16);\n    dst[0] = -m[0];\n    dst[1] = -m[1];\n    dst[2] = -m[2];\n    dst[3] = -m[3];\n    dst[4] = -m[4];\n    dst[5] = -m[5];\n    dst[6] = -m[6];\n    dst[7] = -m[7];\n    dst[8] = -m[8];\n    dst[9] = -m[9];\n    dst[10] = -m[10];\n    dst[11] = -m[11];\n    dst[12] = -m[12];\n    dst[13] = -m[13];\n    dst[14] = -m[14];\n    dst[15] = -m[15];\n    return dst;\n}\n/**\n * Copies a matrix.\n * @param m - The matrix.\n * @param dst - The matrix. If not passed a new one is created.\n * @returns A copy of m.\n */\nfunction copy$1(m, dst) {\n    dst = dst || new MatType(16);\n    dst[0] = m[0];\n    dst[1] = m[1];\n    dst[2] = m[2];\n    dst[3] = m[3];\n    dst[4] = m[4];\n    dst[5] = m[5];\n    dst[6] = m[6];\n    dst[7] = m[7];\n    dst[8] = m[8];\n    dst[9] = m[9];\n    dst[10] = m[10];\n    dst[11] = m[11];\n    dst[12] = m[12];\n    dst[13] = m[13];\n    dst[14] = m[14];\n    dst[15] = m[15];\n    return dst;\n}\n/**\n * Copies a matrix (same as copy)\n * @param m - The matrix.\n * @param dst - The matrix. If not passed a new one is created.\n * @returns A copy of m.\n */\nconst clone$1 = copy$1;\n/**\n * Check if 2 matrices are approximately equal\n * @param a - Operand matrix.\n * @param b - Operand matrix.\n * @returns true if matrices are approximately equal\n */\nfunction equalsApproximately$1(a, b) {\n    return Math.abs(a[0] - b[0]) < EPSILON &&\n        Math.abs(a[1] - b[1]) < EPSILON &&\n        Math.abs(a[2] - b[2]) < EPSILON &&\n        Math.abs(a[3] - b[3]) < EPSILON &&\n        Math.abs(a[4] - b[4]) < EPSILON &&\n        Math.abs(a[5] - b[5]) < EPSILON &&\n        Math.abs(a[6] - b[6]) < EPSILON &&\n        Math.abs(a[7] - b[7]) < EPSILON &&\n        Math.abs(a[8] - b[8]) < EPSILON &&\n        Math.abs(a[9] - b[9]) < EPSILON &&\n        Math.abs(a[10] - b[10]) < EPSILON &&\n        Math.abs(a[11] - b[11]) < EPSILON &&\n        Math.abs(a[12] - b[12]) < EPSILON &&\n        Math.abs(a[13] - b[13]) < EPSILON &&\n        Math.abs(a[14] - b[14]) < EPSILON &&\n        Math.abs(a[15] - b[15]) < EPSILON;\n}\n/**\n * Check if 2 matrices are exactly equal\n * @param a - Operand matrix.\n * @param b - Operand matrix.\n * @returns true if matrices are exactly equal\n */\nfunction equals$1(a, b) {\n    return a[0] === b[0] &&\n        a[1] === b[1] &&\n        a[2] === b[2] &&\n        a[3] === b[3] &&\n        a[4] === b[4] &&\n        a[5] === b[5] &&\n        a[6] === b[6] &&\n        a[7] === b[7] &&\n        a[8] === b[8] &&\n        a[9] === b[9] &&\n        a[10] === b[10] &&\n        a[11] === b[11] &&\n        a[12] === b[12] &&\n        a[13] === b[13] &&\n        a[14] === b[14] &&\n        a[15] === b[15];\n}\n/**\n * Creates a 4-by-4 identity matrix.\n *\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns A 4-by-4 identity matrix.\n */\nfunction identity(dst) {\n    dst = dst || new MatType(16);\n    dst[0] = 1;\n    dst[1] = 0;\n    dst[2] = 0;\n    dst[3] = 0;\n    dst[4] = 0;\n    dst[5] = 1;\n    dst[6] = 0;\n    dst[7] = 0;\n    dst[8] = 0;\n    dst[9] = 0;\n    dst[10] = 1;\n    dst[11] = 0;\n    dst[12] = 0;\n    dst[13] = 0;\n    dst[14] = 0;\n    dst[15] = 1;\n    return dst;\n}\n/**\n * Takes the transpose of a matrix.\n * @param m - The matrix.\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The transpose of m.\n */\nfunction transpose(m, dst) {\n    dst = dst || new MatType(16);\n    if (dst === m) {\n        let t;\n        t = m[1];\n        m[1] = m[4];\n        m[4] = t;\n        t = m[2];\n        m[2] = m[8];\n        m[8] = t;\n        t = m[3];\n        m[3] = m[12];\n        m[12] = t;\n        t = m[6];\n        m[6] = m[9];\n        m[9] = t;\n        t = m[7];\n        m[7] = m[13];\n        m[13] = t;\n        t = m[11];\n        m[11] = m[14];\n        m[14] = t;\n        return dst;\n    }\n    const m00 = m[0 * 4 + 0];\n    const m01 = m[0 * 4 + 1];\n    const m02 = m[0 * 4 + 2];\n    const m03 = m[0 * 4 + 3];\n    const m10 = m[1 * 4 + 0];\n    const m11 = m[1 * 4 + 1];\n    const m12 = m[1 * 4 + 2];\n    const m13 = m[1 * 4 + 3];\n    const m20 = m[2 * 4 + 0];\n    const m21 = m[2 * 4 + 1];\n    const m22 = m[2 * 4 + 2];\n    const m23 = m[2 * 4 + 3];\n    const m30 = m[3 * 4 + 0];\n    const m31 = m[3 * 4 + 1];\n    const m32 = m[3 * 4 + 2];\n    const m33 = m[3 * 4 + 3];\n    dst[0] = m00;\n    dst[1] = m10;\n    dst[2] = m20;\n    dst[3] = m30;\n    dst[4] = m01;\n    dst[5] = m11;\n    dst[6] = m21;\n    dst[7] = m31;\n    dst[8] = m02;\n    dst[9] = m12;\n    dst[10] = m22;\n    dst[11] = m32;\n    dst[12] = m03;\n    dst[13] = m13;\n    dst[14] = m23;\n    dst[15] = m33;\n    return dst;\n}\n/**\n * Computes the inverse of a 4-by-4 matrix.\n * @param m - The matrix.\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The inverse of m.\n */\nfunction inverse$1(m, dst) {\n    dst = dst || new MatType(16);\n    const m00 = m[0 * 4 + 0];\n    const m01 = m[0 * 4 + 1];\n    const m02 = m[0 * 4 + 2];\n    const m03 = m[0 * 4 + 3];\n    const m10 = m[1 * 4 + 0];\n    const m11 = m[1 * 4 + 1];\n    const m12 = m[1 * 4 + 2];\n    const m13 = m[1 * 4 + 3];\n    const m20 = m[2 * 4 + 0];\n    const m21 = m[2 * 4 + 1];\n    const m22 = m[2 * 4 + 2];\n    const m23 = m[2 * 4 + 3];\n    const m30 = m[3 * 4 + 0];\n    const m31 = m[3 * 4 + 1];\n    const m32 = m[3 * 4 + 2];\n    const m33 = m[3 * 4 + 3];\n    const tmp0 = m22 * m33;\n    const tmp1 = m32 * m23;\n    const tmp2 = m12 * m33;\n    const tmp3 = m32 * m13;\n    const tmp4 = m12 * m23;\n    const tmp5 = m22 * m13;\n    const tmp6 = m02 * m33;\n    const tmp7 = m32 * m03;\n    const tmp8 = m02 * m23;\n    const tmp9 = m22 * m03;\n    const tmp10 = m02 * m13;\n    const tmp11 = m12 * m03;\n    const tmp12 = m20 * m31;\n    const tmp13 = m30 * m21;\n    const tmp14 = m10 * m31;\n    const tmp15 = m30 * m11;\n    const tmp16 = m10 * m21;\n    const tmp17 = m20 * m11;\n    const tmp18 = m00 * m31;\n    const tmp19 = m30 * m01;\n    const tmp20 = m00 * m21;\n    const tmp21 = m20 * m01;\n    const tmp22 = m00 * m11;\n    const tmp23 = m10 * m01;\n    const t0 = (tmp0 * m11 + tmp3 * m21 + tmp4 * m31) -\n        (tmp1 * m11 + tmp2 * m21 + tmp5 * m31);\n    const t1 = (tmp1 * m01 + tmp6 * m21 + tmp9 * m31) -\n        (tmp0 * m01 + tmp7 * m21 + tmp8 * m31);\n    const t2 = (tmp2 * m01 + tmp7 * m11 + tmp10 * m31) -\n        (tmp3 * m01 + tmp6 * m11 + tmp11 * m31);\n    const t3 = (tmp5 * m01 + tmp8 * m11 + tmp11 * m21) -\n        (tmp4 * m01 + tmp9 * m11 + tmp10 * m21);\n    const d = 1 / (m00 * t0 + m10 * t1 + m20 * t2 + m30 * t3);\n    dst[0] = d * t0;\n    dst[1] = d * t1;\n    dst[2] = d * t2;\n    dst[3] = d * t3;\n    dst[4] = d * ((tmp1 * m10 + tmp2 * m20 + tmp5 * m30) -\n        (tmp0 * m10 + tmp3 * m20 + tmp4 * m30));\n    dst[5] = d * ((tmp0 * m00 + tmp7 * m20 + tmp8 * m30) -\n        (tmp1 * m00 + tmp6 * m20 + tmp9 * m30));\n    dst[6] = d * ((tmp3 * m00 + tmp6 * m10 + tmp11 * m30) -\n        (tmp2 * m00 + tmp7 * m10 + tmp10 * m30));\n    dst[7] = d * ((tmp4 * m00 + tmp9 * m10 + tmp10 * m20) -\n        (tmp5 * m00 + tmp8 * m10 + tmp11 * m20));\n    dst[8] = d * ((tmp12 * m13 + tmp15 * m23 + tmp16 * m33) -\n        (tmp13 * m13 + tmp14 * m23 + tmp17 * m33));\n    dst[9] = d * ((tmp13 * m03 + tmp18 * m23 + tmp21 * m33) -\n        (tmp12 * m03 + tmp19 * m23 + tmp20 * m33));\n    dst[10] = d * ((tmp14 * m03 + tmp19 * m13 + tmp22 * m33) -\n        (tmp15 * m03 + tmp18 * m13 + tmp23 * m33));\n    dst[11] = d * ((tmp17 * m03 + tmp20 * m13 + tmp23 * m23) -\n        (tmp16 * m03 + tmp21 * m13 + tmp22 * m23));\n    dst[12] = d * ((tmp14 * m22 + tmp17 * m32 + tmp13 * m12) -\n        (tmp16 * m32 + tmp12 * m12 + tmp15 * m22));\n    dst[13] = d * ((tmp20 * m32 + tmp12 * m02 + tmp19 * m22) -\n        (tmp18 * m22 + tmp21 * m32 + tmp13 * m02));\n    dst[14] = d * ((tmp18 * m12 + tmp23 * m32 + tmp15 * m02) -\n        (tmp22 * m32 + tmp14 * m02 + tmp19 * m12));\n    dst[15] = d * ((tmp22 * m22 + tmp16 * m02 + tmp21 * m12) -\n        (tmp20 * m12 + tmp23 * m22 + tmp17 * m02));\n    return dst;\n}\n/**\n * Compute the determinant of a matrix\n * @param m - the matrix\n * @returns the determinant\n */\nfunction determinant(m) {\n    const m00 = m[0 * 4 + 0];\n    const m01 = m[0 * 4 + 1];\n    const m02 = m[0 * 4 + 2];\n    const m03 = m[0 * 4 + 3];\n    const m10 = m[1 * 4 + 0];\n    const m11 = m[1 * 4 + 1];\n    const m12 = m[1 * 4 + 2];\n    const m13 = m[1 * 4 + 3];\n    const m20 = m[2 * 4 + 0];\n    const m21 = m[2 * 4 + 1];\n    const m22 = m[2 * 4 + 2];\n    const m23 = m[2 * 4 + 3];\n    const m30 = m[3 * 4 + 0];\n    const m31 = m[3 * 4 + 1];\n    const m32 = m[3 * 4 + 2];\n    const m33 = m[3 * 4 + 3];\n    const tmp0 = m22 * m33;\n    const tmp1 = m32 * m23;\n    const tmp2 = m12 * m33;\n    const tmp3 = m32 * m13;\n    const tmp4 = m12 * m23;\n    const tmp5 = m22 * m13;\n    const tmp6 = m02 * m33;\n    const tmp7 = m32 * m03;\n    const tmp8 = m02 * m23;\n    const tmp9 = m22 * m03;\n    const tmp10 = m02 * m13;\n    const tmp11 = m12 * m03;\n    const t0 = (tmp0 * m11 + tmp3 * m21 + tmp4 * m31) -\n        (tmp1 * m11 + tmp2 * m21 + tmp5 * m31);\n    const t1 = (tmp1 * m01 + tmp6 * m21 + tmp9 * m31) -\n        (tmp0 * m01 + tmp7 * m21 + tmp8 * m31);\n    const t2 = (tmp2 * m01 + tmp7 * m11 + tmp10 * m31) -\n        (tmp3 * m01 + tmp6 * m11 + tmp11 * m31);\n    const t3 = (tmp5 * m01 + tmp8 * m11 + tmp11 * m21) -\n        (tmp4 * m01 + tmp9 * m11 + tmp10 * m21);\n    return m00 * t0 + m10 * t1 + m20 * t2 + m30 * t3;\n}\n/**\n * Computes the inverse of a 4-by-4 matrix. (same as inverse)\n * @param m - The matrix.\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The inverse of m.\n */\nconst invert$1 = inverse$1;\n/**\n * Multiplies two 4-by-4 matrices with a on the left and b on the right\n * @param a - The matrix on the left.\n * @param b - The matrix on the right.\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The matrix product of a and b.\n */\nfunction multiply$1(a, b, dst) {\n    dst = dst || new MatType(16);\n    const a00 = a[0];\n    const a01 = a[1];\n    const a02 = a[2];\n    const a03 = a[3];\n    const a10 = a[4 + 0];\n    const a11 = a[4 + 1];\n    const a12 = a[4 + 2];\n    const a13 = a[4 + 3];\n    const a20 = a[8 + 0];\n    const a21 = a[8 + 1];\n    const a22 = a[8 + 2];\n    const a23 = a[8 + 3];\n    const a30 = a[12 + 0];\n    const a31 = a[12 + 1];\n    const a32 = a[12 + 2];\n    const a33 = a[12 + 3];\n    const b00 = b[0];\n    const b01 = b[1];\n    const b02 = b[2];\n    const b03 = b[3];\n    const b10 = b[4 + 0];\n    const b11 = b[4 + 1];\n    const b12 = b[4 + 2];\n    const b13 = b[4 + 3];\n    const b20 = b[8 + 0];\n    const b21 = b[8 + 1];\n    const b22 = b[8 + 2];\n    const b23 = b[8 + 3];\n    const b30 = b[12 + 0];\n    const b31 = b[12 + 1];\n    const b32 = b[12 + 2];\n    const b33 = b[12 + 3];\n    dst[0] = a00 * b00 + a10 * b01 + a20 * b02 + a30 * b03;\n    dst[1] = a01 * b00 + a11 * b01 + a21 * b02 + a31 * b03;\n    dst[2] = a02 * b00 + a12 * b01 + a22 * b02 + a32 * b03;\n    dst[3] = a03 * b00 + a13 * b01 + a23 * b02 + a33 * b03;\n    dst[4] = a00 * b10 + a10 * b11 + a20 * b12 + a30 * b13;\n    dst[5] = a01 * b10 + a11 * b11 + a21 * b12 + a31 * b13;\n    dst[6] = a02 * b10 + a12 * b11 + a22 * b12 + a32 * b13;\n    dst[7] = a03 * b10 + a13 * b11 + a23 * b12 + a33 * b13;\n    dst[8] = a00 * b20 + a10 * b21 + a20 * b22 + a30 * b23;\n    dst[9] = a01 * b20 + a11 * b21 + a21 * b22 + a31 * b23;\n    dst[10] = a02 * b20 + a12 * b21 + a22 * b22 + a32 * b23;\n    dst[11] = a03 * b20 + a13 * b21 + a23 * b22 + a33 * b23;\n    dst[12] = a00 * b30 + a10 * b31 + a20 * b32 + a30 * b33;\n    dst[13] = a01 * b30 + a11 * b31 + a21 * b32 + a31 * b33;\n    dst[14] = a02 * b30 + a12 * b31 + a22 * b32 + a32 * b33;\n    dst[15] = a03 * b30 + a13 * b31 + a23 * b32 + a33 * b33;\n    return dst;\n}\n/**\n * Multiplies two 4-by-4 matrices with a on the left and b on the right (same as multiply)\n * @param a - The matrix on the left.\n * @param b - The matrix on the right.\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The matrix product of a and b.\n */\nconst mul$1 = multiply$1;\n/**\n * Sets the translation component of a 4-by-4 matrix to the given\n * vector.\n * @param a - The matrix.\n * @param v - The vector.\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The matrix with translation set.\n */\nfunction setTranslation(a, v, dst) {\n    dst = dst || identity();\n    if (a !== dst) {\n        dst[0] = a[0];\n        dst[1] = a[1];\n        dst[2] = a[2];\n        dst[3] = a[3];\n        dst[4] = a[4];\n        dst[5] = a[5];\n        dst[6] = a[6];\n        dst[7] = a[7];\n        dst[8] = a[8];\n        dst[9] = a[9];\n        dst[10] = a[10];\n        dst[11] = a[11];\n    }\n    dst[12] = v[0];\n    dst[13] = v[1];\n    dst[14] = v[2];\n    dst[15] = 1;\n    return dst;\n}\n/**\n * Returns the translation component of a 4-by-4 matrix as a vector with 3\n * entries.\n * @param m - The matrix.\n * @param dst - vector to hold result. If not passed a new one is created.\n * @returns The translation component of m.\n */\nfunction getTranslation(m, dst) {\n    dst = dst || create$2();\n    dst[0] = m[12];\n    dst[1] = m[13];\n    dst[2] = m[14];\n    return dst;\n}\n/**\n * Returns an axis of a 4x4 matrix as a vector with 3 entries\n * @param m - The matrix.\n * @param axis - The axis 0 = x, 1 = y, 2 = z;\n * @returns The axis component of m.\n */\nfunction getAxis(m, axis, dst) {\n    dst = dst || create$2();\n    const off = axis * 4;\n    dst[0] = m[off + 0];\n    dst[1] = m[off + 1];\n    dst[2] = m[off + 2];\n    return dst;\n}\n/**\n * Sets an axis of a 4x4 matrix as a vector with 3 entries\n * @param m - The matrix.\n * @param v - the axis vector\n * @param axis - The axis  0 = x, 1 = y, 2 = z;\n * @param dst - The matrix to set. If not passed a new one is created.\n * @returns The matrix with axis set.\n */\nfunction setAxis(a, v, axis, dst) {\n    if (dst !== a) {\n        dst = copy$1(a, dst);\n    }\n    const off = axis * 4;\n    dst[off + 0] = v[0];\n    dst[off + 1] = v[1];\n    dst[off + 2] = v[2];\n    return dst;\n}\n/**\n * Returns the scaling component of the matrix\n * @param m - The Matrix\n * @param dst - The vector to set. If not passed a new one is created.\n */\nfunction getScaling(m, dst) {\n    dst = dst || create$2();\n    const xx = m[0];\n    const xy = m[1];\n    const xz = m[2];\n    const yx = m[4];\n    const yy = m[5];\n    const yz = m[6];\n    const zx = m[8];\n    const zy = m[9];\n    const zz = m[10];\n    dst[0] = Math.sqrt(xx * xx + xy * xy + xz * xz);\n    dst[1] = Math.sqrt(yx * yx + yy * yy + yz * yz);\n    dst[2] = Math.sqrt(zx * zx + zy * zy + zz * zz);\n    return dst;\n}\n/**\n * Computes a 4-by-4 perspective transformation matrix given the angular height\n * of the frustum, the aspect ratio, and the near and far clipping planes.  The\n * arguments define a frustum extending in the negative z direction.  The given\n * angle is the vertical angle of the frustum, and the horizontal angle is\n * determined to produce the given aspect ratio.  The arguments near and far are\n * the distances to the near and far clipping planes.  Note that near and far\n * are not z coordinates, but rather they are distances along the negative\n * z-axis.  The matrix generated sends the viewing frustum to the unit box.\n * We assume a unit box extending from -1 to 1 in the x and y dimensions and\n * from 0 to 1 in the z dimension.\n * @param fieldOfViewYInRadians - The camera angle from top to bottom (in radians).\n * @param aspect - The aspect ratio width / height.\n * @param zNear - The depth (negative z coordinate)\n *     of the near clipping plane.\n * @param zFar - The depth (negative z coordinate)\n *     of the far clipping plane.\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The perspective matrix.\n */\nfunction perspective(fieldOfViewYInRadians, aspect, zNear, zFar, dst) {\n    dst = dst || new MatType(16);\n    const f = Math.tan(Math.PI * 0.5 - 0.5 * fieldOfViewYInRadians);\n    const rangeInv = 1 / (zNear - zFar);\n    dst[0] = f / aspect;\n    dst[1] = 0;\n    dst[2] = 0;\n    dst[3] = 0;\n    dst[4] = 0;\n    dst[5] = f;\n    dst[6] = 0;\n    dst[7] = 0;\n    dst[8] = 0;\n    dst[9] = 0;\n    dst[10] = zFar * rangeInv;\n    dst[11] = -1;\n    dst[12] = 0;\n    dst[13] = 0;\n    dst[14] = zNear * zFar * rangeInv;\n    dst[15] = 0;\n    return dst;\n}\n/**\n * Computes a 4-by-4 orthogonal transformation matrix that transforms from\n * the given the left, right, bottom, and top dimensions to -1 +1 in x, and y\n * and 0 to +1 in z.\n * @param left - Left side of the near clipping plane viewport.\n * @param right - Right side of the near clipping plane viewport.\n * @param bottom - Bottom of the near clipping plane viewport.\n * @param top - Top of the near clipping plane viewport.\n * @param near - The depth (negative z coordinate)\n *     of the near clipping plane.\n * @param far - The depth (negative z coordinate)\n *     of the far clipping plane.\n * @param dst - Output matrix. If not passed a new one is created.\n * @returns The perspective matrix.\n */\nfunction ortho(left, right, bottom, top, near, far, dst) {\n    dst = dst || new MatType(16);\n    dst[0] = 2 / (right - left);\n    dst[1] = 0;\n    dst[2] = 0;\n    dst[3] = 0;\n    dst[4] = 0;\n    dst[5] = 2 / (top - bottom);\n    dst[6] = 0;\n    dst[7] = 0;\n    dst[8] = 0;\n    dst[9] = 0;\n    dst[10] = 1 / (near - far);\n    dst[11] = 0;\n    dst[12] = (right + left) / (left - right);\n    dst[13] = (top + bottom) / (bottom - top);\n    dst[14] = near / (near - far);\n    dst[15] = 1;\n    return dst;\n}\n/**\n * Computes a 4-by-4 perspective transformation matrix given the left, right,\n * top, bottom, near and far clipping planes. The arguments define a frustum\n * extending in the negative z direction. The arguments near and far are the\n * distances to the near and far clipping planes. Note that near and far are not\n * z coordinates, but rather they are distances along the negative z-axis. The\n * matrix generated sends the viewing frustum to the unit box. We assume a unit\n * box extending from -1 to 1 in the x and y dimensions and from 0 to 1 in the z\n * dimension.\n * @param left - The x coordinate of the left plane of the box.\n * @param right - The x coordinate of the right plane of the box.\n * @param bottom - The y coordinate of the bottom plane of the box.\n * @param top - The y coordinate of the right plane of the box.\n * @param near - The negative z coordinate of the near plane of the box.\n * @param far - The negative z coordinate of the far plane of the box.\n * @param dst - Output matrix. If not passed a new one is created.\n * @returns The perspective projection matrix.\n */\nfunction frustum(left, right, bottom, top, near, far, dst) {\n    dst = dst || new MatType(16);\n    const dx = (right - left);\n    const dy = (top - bottom);\n    const dz = (near - far);\n    dst[0] = 2 * near / dx;\n    dst[1] = 0;\n    dst[2] = 0;\n    dst[3] = 0;\n    dst[4] = 0;\n    dst[5] = 2 * near / dy;\n    dst[6] = 0;\n    dst[7] = 0;\n    dst[8] = (left + right) / dx;\n    dst[9] = (top + bottom) / dy;\n    dst[10] = far / dz;\n    dst[11] = -1;\n    dst[12] = 0;\n    dst[13] = 0;\n    dst[14] = near * far / dz;\n    dst[15] = 0;\n    return dst;\n}\nlet xAxis;\nlet yAxis;\nlet zAxis;\n/**\n * Computes a 4-by-4 look-at transformation.\n *\n * This is a matrix which positions the camera itself. If you want\n * a view matrix (a matrix which moves things in front of the camera)\n * take the inverse of this.\n *\n * @param eye - The position of the eye.\n * @param target - The position meant to be viewed.\n * @param up - A vector pointing up.\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The look-at matrix.\n */\nfunction lookAt(eye, target, up, dst) {\n    dst = dst || new MatType(16);\n    xAxis = xAxis || create$2();\n    yAxis = yAxis || create$2();\n    zAxis = zAxis || create$2();\n    normalize$1(subtract$1(eye, target, zAxis), zAxis);\n    normalize$1(cross(up, zAxis, xAxis), xAxis);\n    normalize$1(cross(zAxis, xAxis, yAxis), yAxis);\n    dst[0] = xAxis[0];\n    dst[1] = xAxis[1];\n    dst[2] = xAxis[2];\n    dst[3] = 0;\n    dst[4] = yAxis[0];\n    dst[5] = yAxis[1];\n    dst[6] = yAxis[2];\n    dst[7] = 0;\n    dst[8] = zAxis[0];\n    dst[9] = zAxis[1];\n    dst[10] = zAxis[2];\n    dst[11] = 0;\n    dst[12] = eye[0];\n    dst[13] = eye[1];\n    dst[14] = eye[2];\n    dst[15] = 1;\n    return dst;\n}\n/**\n * Creates a 4-by-4 matrix which translates by the given vector v.\n * @param v - The vector by\n *     which to translate.\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The translation matrix.\n */\nfunction translation(v, dst) {\n    dst = dst || new MatType(16);\n    dst[0] = 1;\n    dst[1] = 0;\n    dst[2] = 0;\n    dst[3] = 0;\n    dst[4] = 0;\n    dst[5] = 1;\n    dst[6] = 0;\n    dst[7] = 0;\n    dst[8] = 0;\n    dst[9] = 0;\n    dst[10] = 1;\n    dst[11] = 0;\n    dst[12] = v[0];\n    dst[13] = v[1];\n    dst[14] = v[2];\n    dst[15] = 1;\n    return dst;\n}\n/**\n * Translates the given 4-by-4 matrix by the given vector v.\n * @param m - The matrix.\n * @param v - The vector by\n *     which to translate.\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The translated matrix.\n */\nfunction translate(m, v, dst) {\n    dst = dst || new MatType(16);\n    const v0 = v[0];\n    const v1 = v[1];\n    const v2 = v[2];\n    const m00 = m[0];\n    const m01 = m[1];\n    const m02 = m[2];\n    const m03 = m[3];\n    const m10 = m[1 * 4 + 0];\n    const m11 = m[1 * 4 + 1];\n    const m12 = m[1 * 4 + 2];\n    const m13 = m[1 * 4 + 3];\n    const m20 = m[2 * 4 + 0];\n    const m21 = m[2 * 4 + 1];\n    const m22 = m[2 * 4 + 2];\n    const m23 = m[2 * 4 + 3];\n    const m30 = m[3 * 4 + 0];\n    const m31 = m[3 * 4 + 1];\n    const m32 = m[3 * 4 + 2];\n    const m33 = m[3 * 4 + 3];\n    if (m !== dst) {\n        dst[0] = m00;\n        dst[1] = m01;\n        dst[2] = m02;\n        dst[3] = m03;\n        dst[4] = m10;\n        dst[5] = m11;\n        dst[6] = m12;\n        dst[7] = m13;\n        dst[8] = m20;\n        dst[9] = m21;\n        dst[10] = m22;\n        dst[11] = m23;\n    }\n    dst[12] = m00 * v0 + m10 * v1 + m20 * v2 + m30;\n    dst[13] = m01 * v0 + m11 * v1 + m21 * v2 + m31;\n    dst[14] = m02 * v0 + m12 * v1 + m22 * v2 + m32;\n    dst[15] = m03 * v0 + m13 * v1 + m23 * v2 + m33;\n    return dst;\n}\n/**\n * Creates a 4-by-4 matrix which rotates around the x-axis by the given angle.\n * @param angleInRadians - The angle by which to rotate (in radians).\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The rotation matrix.\n */\nfunction rotationX(angleInRadians, dst) {\n    dst = dst || new MatType(16);\n    const c = Math.cos(angleInRadians);\n    const s = Math.sin(angleInRadians);\n    dst[0] = 1;\n    dst[1] = 0;\n    dst[2] = 0;\n    dst[3] = 0;\n    dst[4] = 0;\n    dst[5] = c;\n    dst[6] = s;\n    dst[7] = 0;\n    dst[8] = 0;\n    dst[9] = -s;\n    dst[10] = c;\n    dst[11] = 0;\n    dst[12] = 0;\n    dst[13] = 0;\n    dst[14] = 0;\n    dst[15] = 1;\n    return dst;\n}\n/**\n * Rotates the given 4-by-4 matrix around the x-axis by the given\n * angle.\n * @param m - The matrix.\n * @param angleInRadians - The angle by which to rotate (in radians).\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The rotated matrix.\n */\nfunction rotateX(m, angleInRadians, dst) {\n    dst = dst || new MatType(16);\n    const m10 = m[4];\n    const m11 = m[5];\n    const m12 = m[6];\n    const m13 = m[7];\n    const m20 = m[8];\n    const m21 = m[9];\n    const m22 = m[10];\n    const m23 = m[11];\n    const c = Math.cos(angleInRadians);\n    const s = Math.sin(angleInRadians);\n    dst[4] = c * m10 + s * m20;\n    dst[5] = c * m11 + s * m21;\n    dst[6] = c * m12 + s * m22;\n    dst[7] = c * m13 + s * m23;\n    dst[8] = c * m20 - s * m10;\n    dst[9] = c * m21 - s * m11;\n    dst[10] = c * m22 - s * m12;\n    dst[11] = c * m23 - s * m13;\n    if (m !== dst) {\n        dst[0] = m[0];\n        dst[1] = m[1];\n        dst[2] = m[2];\n        dst[3] = m[3];\n        dst[12] = m[12];\n        dst[13] = m[13];\n        dst[14] = m[14];\n        dst[15] = m[15];\n    }\n    return dst;\n}\n/**\n * Creates a 4-by-4 matrix which rotates around the y-axis by the given angle.\n * @param angleInRadians - The angle by which to rotate (in radians).\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The rotation matrix.\n */\nfunction rotationY(angleInRadians, dst) {\n    dst = dst || new MatType(16);\n    const c = Math.cos(angleInRadians);\n    const s = Math.sin(angleInRadians);\n    dst[0] = c;\n    dst[1] = 0;\n    dst[2] = -s;\n    dst[3] = 0;\n    dst[4] = 0;\n    dst[5] = 1;\n    dst[6] = 0;\n    dst[7] = 0;\n    dst[8] = s;\n    dst[9] = 0;\n    dst[10] = c;\n    dst[11] = 0;\n    dst[12] = 0;\n    dst[13] = 0;\n    dst[14] = 0;\n    dst[15] = 1;\n    return dst;\n}\n/**\n * Rotates the given 4-by-4 matrix around the y-axis by the given\n * angle.\n * @param m - The matrix.\n * @param angleInRadians - The angle by which to rotate (in radians).\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The rotated matrix.\n */\nfunction rotateY(m, angleInRadians, dst) {\n    dst = dst || new MatType(16);\n    const m00 = m[0 * 4 + 0];\n    const m01 = m[0 * 4 + 1];\n    const m02 = m[0 * 4 + 2];\n    const m03 = m[0 * 4 + 3];\n    const m20 = m[2 * 4 + 0];\n    const m21 = m[2 * 4 + 1];\n    const m22 = m[2 * 4 + 2];\n    const m23 = m[2 * 4 + 3];\n    const c = Math.cos(angleInRadians);\n    const s = Math.sin(angleInRadians);\n    dst[0] = c * m00 - s * m20;\n    dst[1] = c * m01 - s * m21;\n    dst[2] = c * m02 - s * m22;\n    dst[3] = c * m03 - s * m23;\n    dst[8] = c * m20 + s * m00;\n    dst[9] = c * m21 + s * m01;\n    dst[10] = c * m22 + s * m02;\n    dst[11] = c * m23 + s * m03;\n    if (m !== dst) {\n        dst[4] = m[4];\n        dst[5] = m[5];\n        dst[6] = m[6];\n        dst[7] = m[7];\n        dst[12] = m[12];\n        dst[13] = m[13];\n        dst[14] = m[14];\n        dst[15] = m[15];\n    }\n    return dst;\n}\n/**\n * Creates a 4-by-4 matrix which rotates around the z-axis by the given angle.\n * @param angleInRadians - The angle by which to rotate (in radians).\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The rotation matrix.\n */\nfunction rotationZ(angleInRadians, dst) {\n    dst = dst || new MatType(16);\n    const c = Math.cos(angleInRadians);\n    const s = Math.sin(angleInRadians);\n    dst[0] = c;\n    dst[1] = s;\n    dst[2] = 0;\n    dst[3] = 0;\n    dst[4] = -s;\n    dst[5] = c;\n    dst[6] = 0;\n    dst[7] = 0;\n    dst[8] = 0;\n    dst[9] = 0;\n    dst[10] = 1;\n    dst[11] = 0;\n    dst[12] = 0;\n    dst[13] = 0;\n    dst[14] = 0;\n    dst[15] = 1;\n    return dst;\n}\n/**\n * Rotates the given 4-by-4 matrix around the z-axis by the given\n * angle.\n * @param m - The matrix.\n * @param angleInRadians - The angle by which to rotate (in radians).\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The rotated matrix.\n */\nfunction rotateZ(m, angleInRadians, dst) {\n    dst = dst || new MatType(16);\n    const m00 = m[0 * 4 + 0];\n    const m01 = m[0 * 4 + 1];\n    const m02 = m[0 * 4 + 2];\n    const m03 = m[0 * 4 + 3];\n    const m10 = m[1 * 4 + 0];\n    const m11 = m[1 * 4 + 1];\n    const m12 = m[1 * 4 + 2];\n    const m13 = m[1 * 4 + 3];\n    const c = Math.cos(angleInRadians);\n    const s = Math.sin(angleInRadians);\n    dst[0] = c * m00 + s * m10;\n    dst[1] = c * m01 + s * m11;\n    dst[2] = c * m02 + s * m12;\n    dst[3] = c * m03 + s * m13;\n    dst[4] = c * m10 - s * m00;\n    dst[5] = c * m11 - s * m01;\n    dst[6] = c * m12 - s * m02;\n    dst[7] = c * m13 - s * m03;\n    if (m !== dst) {\n        dst[8] = m[8];\n        dst[9] = m[9];\n        dst[10] = m[10];\n        dst[11] = m[11];\n        dst[12] = m[12];\n        dst[13] = m[13];\n        dst[14] = m[14];\n        dst[15] = m[15];\n    }\n    return dst;\n}\n/**\n * Creates a 4-by-4 matrix which rotates around the given axis by the given\n * angle.\n * @param axis - The axis\n *     about which to rotate.\n * @param angleInRadians - The angle by which to rotate (in radians).\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns A matrix which rotates angle radians\n *     around the axis.\n */\nfunction axisRotation(axis, angleInRadians, dst) {\n    dst = dst || new MatType(16);\n    let x = axis[0];\n    let y = axis[1];\n    let z = axis[2];\n    const n = Math.sqrt(x * x + y * y + z * z);\n    x /= n;\n    y /= n;\n    z /= n;\n    const xx = x * x;\n    const yy = y * y;\n    const zz = z * z;\n    const c = Math.cos(angleInRadians);\n    const s = Math.sin(angleInRadians);\n    const oneMinusCosine = 1 - c;\n    dst[0] = xx + (1 - xx) * c;\n    dst[1] = x * y * oneMinusCosine + z * s;\n    dst[2] = x * z * oneMinusCosine - y * s;\n    dst[3] = 0;\n    dst[4] = x * y * oneMinusCosine - z * s;\n    dst[5] = yy + (1 - yy) * c;\n    dst[6] = y * z * oneMinusCosine + x * s;\n    dst[7] = 0;\n    dst[8] = x * z * oneMinusCosine + y * s;\n    dst[9] = y * z * oneMinusCosine - x * s;\n    dst[10] = zz + (1 - zz) * c;\n    dst[11] = 0;\n    dst[12] = 0;\n    dst[13] = 0;\n    dst[14] = 0;\n    dst[15] = 1;\n    return dst;\n}\n/**\n * Creates a 4-by-4 matrix which rotates around the given axis by the given\n * angle. (same as axisRotation)\n * @param axis - The axis\n *     about which to rotate.\n * @param angleInRadians - The angle by which to rotate (in radians).\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns A matrix which rotates angle radians\n *     around the axis.\n */\nconst rotation = axisRotation;\n/**\n * Rotates the given 4-by-4 matrix around the given axis by the\n * given angle.\n * @param m - The matrix.\n * @param axis - The axis\n *     about which to rotate.\n * @param angleInRadians - The angle by which to rotate (in radians).\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The rotated matrix.\n */\nfunction axisRotate(m, axis, angleInRadians, dst) {\n    dst = dst || new MatType(16);\n    let x = axis[0];\n    let y = axis[1];\n    let z = axis[2];\n    const n = Math.sqrt(x * x + y * y + z * z);\n    x /= n;\n    y /= n;\n    z /= n;\n    const xx = x * x;\n    const yy = y * y;\n    const zz = z * z;\n    const c = Math.cos(angleInRadians);\n    const s = Math.sin(angleInRadians);\n    const oneMinusCosine = 1 - c;\n    const r00 = xx + (1 - xx) * c;\n    const r01 = x * y * oneMinusCosine + z * s;\n    const r02 = x * z * oneMinusCosine - y * s;\n    const r10 = x * y * oneMinusCosine - z * s;\n    const r11 = yy + (1 - yy) * c;\n    const r12 = y * z * oneMinusCosine + x * s;\n    const r20 = x * z * oneMinusCosine + y * s;\n    const r21 = y * z * oneMinusCosine - x * s;\n    const r22 = zz + (1 - zz) * c;\n    const m00 = m[0];\n    const m01 = m[1];\n    const m02 = m[2];\n    const m03 = m[3];\n    const m10 = m[4];\n    const m11 = m[5];\n    const m12 = m[6];\n    const m13 = m[7];\n    const m20 = m[8];\n    const m21 = m[9];\n    const m22 = m[10];\n    const m23 = m[11];\n    dst[0] = r00 * m00 + r01 * m10 + r02 * m20;\n    dst[1] = r00 * m01 + r01 * m11 + r02 * m21;\n    dst[2] = r00 * m02 + r01 * m12 + r02 * m22;\n    dst[3] = r00 * m03 + r01 * m13 + r02 * m23;\n    dst[4] = r10 * m00 + r11 * m10 + r12 * m20;\n    dst[5] = r10 * m01 + r11 * m11 + r12 * m21;\n    dst[6] = r10 * m02 + r11 * m12 + r12 * m22;\n    dst[7] = r10 * m03 + r11 * m13 + r12 * m23;\n    dst[8] = r20 * m00 + r21 * m10 + r22 * m20;\n    dst[9] = r20 * m01 + r21 * m11 + r22 * m21;\n    dst[10] = r20 * m02 + r21 * m12 + r22 * m22;\n    dst[11] = r20 * m03 + r21 * m13 + r22 * m23;\n    if (m !== dst) {\n        dst[12] = m[12];\n        dst[13] = m[13];\n        dst[14] = m[14];\n        dst[15] = m[15];\n    }\n    return dst;\n}\n/**\n * Rotates the given 4-by-4 matrix around the given axis by the\n * given angle. (same as rotate)\n * @param m - The matrix.\n * @param axis - The axis\n *     about which to rotate.\n * @param angleInRadians - The angle by which to rotate (in radians).\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The rotated matrix.\n */\nconst rotate = axisRotate;\n/**\n * Creates a 4-by-4 matrix which scales in each dimension by an amount given by\n * the corresponding entry in the given vector; assumes the vector has three\n * entries.\n * @param v - A vector of\n *     three entries specifying the factor by which to scale in each dimension.\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The scaling matrix.\n */\nfunction scaling(v, dst) {\n    dst = dst || new MatType(16);\n    dst[0] = v[0];\n    dst[1] = 0;\n    dst[2] = 0;\n    dst[3] = 0;\n    dst[4] = 0;\n    dst[5] = v[1];\n    dst[6] = 0;\n    dst[7] = 0;\n    dst[8] = 0;\n    dst[9] = 0;\n    dst[10] = v[2];\n    dst[11] = 0;\n    dst[12] = 0;\n    dst[13] = 0;\n    dst[14] = 0;\n    dst[15] = 1;\n    return dst;\n}\n/**\n * Scales the given 4-by-4 matrix in each dimension by an amount\n * given by the corresponding entry in the given vector; assumes the vector has\n * three entries.\n * @param m - The matrix to be modified.\n * @param v - A vector of three entries specifying the\n *     factor by which to scale in each dimension.\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The scaled matrix.\n */\nfunction scale$1(m, v, dst) {\n    dst = dst || new MatType(16);\n    const v0 = v[0];\n    const v1 = v[1];\n    const v2 = v[2];\n    dst[0] = v0 * m[0 * 4 + 0];\n    dst[1] = v0 * m[0 * 4 + 1];\n    dst[2] = v0 * m[0 * 4 + 2];\n    dst[3] = v0 * m[0 * 4 + 3];\n    dst[4] = v1 * m[1 * 4 + 0];\n    dst[5] = v1 * m[1 * 4 + 1];\n    dst[6] = v1 * m[1 * 4 + 2];\n    dst[7] = v1 * m[1 * 4 + 3];\n    dst[8] = v2 * m[2 * 4 + 0];\n    dst[9] = v2 * m[2 * 4 + 1];\n    dst[10] = v2 * m[2 * 4 + 2];\n    dst[11] = v2 * m[2 * 4 + 3];\n    if (m !== dst) {\n        dst[12] = m[12];\n        dst[13] = m[13];\n        dst[14] = m[14];\n        dst[15] = m[15];\n    }\n    return dst;\n}\n\nvar mat4Impl = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    setDefaultType: setDefaultType$2,\n    create: create$1,\n    negate: negate$1,\n    copy: copy$1,\n    clone: clone$1,\n    equalsApproximately: equalsApproximately$1,\n    equals: equals$1,\n    identity: identity,\n    transpose: transpose,\n    inverse: inverse$1,\n    determinant: determinant,\n    invert: invert$1,\n    multiply: multiply$1,\n    mul: mul$1,\n    setTranslation: setTranslation,\n    getTranslation: getTranslation,\n    getAxis: getAxis,\n    setAxis: setAxis,\n    getScaling: getScaling,\n    perspective: perspective,\n    ortho: ortho,\n    frustum: frustum,\n    lookAt: lookAt,\n    translation: translation,\n    translate: translate,\n    rotationX: rotationX,\n    rotateX: rotateX,\n    rotationY: rotationY,\n    rotateY: rotateY,\n    rotationZ: rotationZ,\n    rotateZ: rotateZ,\n    axisRotation: axisRotation,\n    rotation: rotation,\n    axisRotate: axisRotate,\n    rotate: rotate,\n    scaling: scaling,\n    scale: scale$1\n});\n\n/**\n *\n * Vec4 math functions.\n *\n * Almost all functions take an optional `dst` argument. If it is not passed in the\n * functions will create a new `Vec4`. In other words you can do this\n *\n *     const v = vec4.cross(v1, v2);  // Creates a new Vec4 with the cross product of v1 x v2.\n *\n * or\n *\n *     const v = vec4.create();\n *     vec4.cross(v1, v2, v);  // Puts the cross product of v1 x v2 in v\n *\n * The first style is often easier but depending on where it's used it generates garbage where\n * as there is almost never allocation with the second style.\n *\n * It is always safe to pass any vector as the destination. So for example\n *\n *     vec4.cross(v1, v2, v1);  // Puts the cross product of v1 x v2 in v1\n *\n */\nlet VecType = Float32Array;\n/**\n * Sets the type this library creates for a Vec4\n * @param ctor - the constructor for the type. Either `Float32Array`, 'Float64Array', or `Array`\n * @returns previous constructor for Vec4\n */\nfunction setDefaultType$1(ctor) {\n    const oldType = VecType;\n    VecType = ctor;\n    return oldType;\n}\n/**\n * Creates a vec4; may be called with x, y, z to set initial values.\n * @param x - Initial x value.\n * @param y - Initial y value.\n * @param z - Initial z value.\n * @param w - Initial w value.\n * @returns the created vector\n */\nfunction create(x, y, z, w) {\n    const dst = new VecType(4);\n    if (x !== undefined) {\n        dst[0] = x;\n        if (y !== undefined) {\n            dst[1] = y;\n            if (z !== undefined) {\n                dst[2] = z;\n                if (w !== undefined) {\n                    dst[3] = w;\n                }\n            }\n        }\n    }\n    return dst;\n}\n/**\n * Creates a vec4; may be called with x, y, z to set initial values. (same as create)\n * @param x - Initial x value.\n * @param y - Initial y value.\n * @param z - Initial z value.\n * @param z - Initial w value.\n * @returns the created vector\n */\nconst fromValues = create;\n/**\n * Applies Math.ceil to each element of vector\n * @param v - Operand vector.\n * @param dst - vector to hold result. If not new one is created.\n * @returns A vector that is the ceil of each element of v.\n */\nfunction ceil(v, dst) {\n    dst = dst || new VecType(4);\n    dst[0] = Math.ceil(v[0]);\n    dst[1] = Math.ceil(v[1]);\n    dst[2] = Math.ceil(v[2]);\n    dst[3] = Math.ceil(v[3]);\n    return dst;\n}\n/**\n * Applies Math.floor to each element of vector\n * @param v - Operand vector.\n * @param dst - vector to hold result. If not new one is created.\n * @returns A vector that is the floor of each element of v.\n */\nfunction floor(v, dst) {\n    dst = dst || new VecType(4);\n    dst[0] = Math.floor(v[0]);\n    dst[1] = Math.floor(v[1]);\n    dst[2] = Math.floor(v[2]);\n    dst[3] = Math.floor(v[3]);\n    return dst;\n}\n/**\n * Applies Math.round to each element of vector\n * @param v - Operand vector.\n * @param dst - vector to hold result. If not new one is created.\n * @returns A vector that is the round of each element of v.\n */\nfunction round(v, dst) {\n    dst = dst || new VecType(4);\n    dst[0] = Math.round(v[0]);\n    dst[1] = Math.round(v[1]);\n    dst[2] = Math.round(v[2]);\n    dst[3] = Math.round(v[3]);\n    return dst;\n}\n/**\n * Clamp each element of vector between min and max\n * @param v - Operand vector.\n * @param max - Min value, default 0\n * @param min - Max value, default 1\n * @param dst - vector to hold result. If not new one is created.\n * @returns A vector that the clamped value of each element of v.\n */\nfunction clamp(v, min = 0, max = 1, dst) {\n    dst = dst || new VecType(4);\n    dst[0] = Math.min(max, Math.max(min, v[0]));\n    dst[1] = Math.min(max, Math.max(min, v[1]));\n    dst[2] = Math.min(max, Math.max(min, v[2]));\n    dst[3] = Math.min(max, Math.max(min, v[3]));\n    return dst;\n}\n/**\n * Adds two vectors; assumes a and b have the same dimension.\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param dst - vector to hold result. If not new one is created.\n * @returns A vector that is the sum of a and b.\n */\nfunction add(a, b, dst) {\n    dst = dst || new VecType(4);\n    dst[0] = a[0] + b[0];\n    dst[1] = a[1] + b[1];\n    dst[2] = a[2] + b[2];\n    dst[3] = a[3] + b[3];\n    return dst;\n}\n/**\n * Adds two vectors, scaling the 2nd; assumes a and b have the same dimension.\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param scale - Amount to scale b\n * @param dst - vector to hold result. If not new one is created.\n * @returns A vector that is the sum of a + b * scale.\n */\nfunction addScaled(a, b, scale, dst) {\n    dst = dst || new VecType(4);\n    dst[0] = a[0] + b[0] * scale;\n    dst[1] = a[1] + b[1] * scale;\n    dst[2] = a[2] + b[2] * scale;\n    dst[3] = a[3] + b[3] * scale;\n    return dst;\n}\n/**\n * Subtracts two vectors.\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param dst - vector to hold result. If not new one is created.\n * @returns A vector that is the difference of a and b.\n */\nfunction subtract(a, b, dst) {\n    dst = dst || new VecType(4);\n    dst[0] = a[0] - b[0];\n    dst[1] = a[1] - b[1];\n    dst[2] = a[2] - b[2];\n    dst[3] = a[3] - b[3];\n    return dst;\n}\n/**\n * Subtracts two vectors.\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param dst - vector to hold result. If not new one is created.\n * @returns A vector that is the difference of a and b.\n */\nconst sub = subtract;\n/**\n * Check if 2 vectors are approximately equal\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @returns true if vectors are approximately equal\n */\nfunction equalsApproximately(a, b) {\n    return Math.abs(a[0] - b[0]) < EPSILON &&\n        Math.abs(a[1] - b[1]) < EPSILON &&\n        Math.abs(a[2] - b[2]) < EPSILON &&\n        Math.abs(a[3] - b[3]) < EPSILON;\n}\n/**\n * Check if 2 vectors are exactly equal\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @returns true if vectors are exactly equal\n */\nfunction equals(a, b) {\n    return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\n}\n/**\n * Performs linear interpolation on two vectors.\n * Given vectors a and b and interpolation coefficient t, returns\n * a + t * (b - a).\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param t - Interpolation coefficient.\n * @param dst - vector to hold result. If not new one is created.\n * @returns The linear interpolated result.\n */\nfunction lerp(a, b, t, dst) {\n    dst = dst || new VecType(4);\n    dst[0] = a[0] + t * (b[0] - a[0]);\n    dst[1] = a[1] + t * (b[1] - a[1]);\n    dst[2] = a[2] + t * (b[2] - a[2]);\n    dst[3] = a[3] + t * (b[3] - a[3]);\n    return dst;\n}\n/**\n * Performs linear interpolation on two vectors.\n * Given vectors a and b and interpolation coefficient vector t, returns\n * a + t * (b - a).\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param t - Interpolation coefficients vector.\n * @param dst - vector to hold result. If not new one is created.\n * @returns the linear interpolated result.\n */\nfunction lerpV(a, b, t, dst) {\n    dst = dst || new VecType(4);\n    dst[0] = a[0] + t[0] * (b[0] - a[0]);\n    dst[1] = a[1] + t[1] * (b[1] - a[1]);\n    dst[2] = a[2] + t[2] * (b[2] - a[2]);\n    dst[3] = a[3] + t[3] * (b[3] - a[3]);\n    return dst;\n}\n/**\n * Return max values of two vectors.\n * Given vectors a and b returns\n * [max(a[0], b[0]), max(a[1], b[1]), max(a[2], b[2])].\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param dst - vector to hold result. If not new one is created.\n * @returns The max components vector.\n */\nfunction max(a, b, dst) {\n    dst = dst || new VecType(4);\n    dst[0] = Math.max(a[0], b[0]);\n    dst[1] = Math.max(a[1], b[1]);\n    dst[2] = Math.max(a[2], b[2]);\n    dst[3] = Math.max(a[3], b[3]);\n    return dst;\n}\n/**\n * Return min values of two vectors.\n * Given vectors a and b returns\n * [min(a[0], b[0]), min(a[1], b[1]), min(a[2], b[2])].\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param dst - vector to hold result. If not new one is created.\n * @returns The min components vector.\n */\nfunction min(a, b, dst) {\n    dst = dst || new VecType(4);\n    dst[0] = Math.min(a[0], b[0]);\n    dst[1] = Math.min(a[1], b[1]);\n    dst[2] = Math.min(a[2], b[2]);\n    dst[3] = Math.min(a[3], b[3]);\n    return dst;\n}\n/**\n * Multiplies a vector by a scalar.\n * @param v - The vector.\n * @param k - The scalar.\n * @param dst - vector to hold result. If not new one is created.\n * @returns The scaled vector.\n */\nfunction mulScalar(v, k, dst) {\n    dst = dst || new VecType(4);\n    dst[0] = v[0] * k;\n    dst[1] = v[1] * k;\n    dst[2] = v[2] * k;\n    dst[3] = v[3] * k;\n    return dst;\n}\n/**\n * Multiplies a vector by a scalar. (same as mulScalar)\n * @param v - The vector.\n * @param k - The scalar.\n * @param dst - vector to hold result. If not new one is created.\n * @returns The scaled vector.\n */\nconst scale = mulScalar;\n/**\n * Divides a vector by a scalar.\n * @param v - The vector.\n * @param k - The scalar.\n * @param dst - vector to hold result. If not new one is created.\n * @returns The scaled vector.\n */\nfunction divScalar(v, k, dst) {\n    dst = dst || new VecType(4);\n    dst[0] = v[0] / k;\n    dst[1] = v[1] / k;\n    dst[2] = v[2] / k;\n    dst[3] = v[3] / k;\n    return dst;\n}\n/**\n * Inverse a vector.\n * @param v - The vector.\n * @param dst - vector to hold result. If not new one is created.\n * @returns The inverted vector.\n */\nfunction inverse(v, dst) {\n    dst = dst || new VecType(4);\n    dst[0] = 1 / v[0];\n    dst[1] = 1 / v[1];\n    dst[2] = 1 / v[2];\n    dst[3] = 1 / v[3];\n    return dst;\n}\n/**\n * Invert a vector. (same as inverse)\n * @param v - The vector.\n * @param dst - vector to hold result. If not new one is created.\n * @returns The inverted vector.\n */\nconst invert = inverse;\n/**\n * Computes the dot product of two vectors; assumes both vectors have\n * three entries.\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @returns dot product\n */\nfunction dot(a, b) {\n    return (a[0] * b[0]) + (a[1] * b[1]) + (a[2] * b[2]) + (a[3] * b[3]);\n}\n/**\n * Computes the length of vector\n * @param v - vector.\n * @returns length of vector.\n */\nfunction length(v) {\n    const v0 = v[0];\n    const v1 = v[1];\n    const v2 = v[2];\n    const v3 = v[3];\n    return Math.sqrt(v0 * v0 + v1 * v1 + v2 * v2 + v3 * v3);\n}\n/**\n * Computes the length of vector (same as length)\n * @param v - vector.\n * @returns length of vector.\n */\nconst len = length;\n/**\n * Computes the square of the length of vector\n * @param v - vector.\n * @returns square of the length of vector.\n */\nfunction lengthSq(v) {\n    const v0 = v[0];\n    const v1 = v[1];\n    const v2 = v[2];\n    const v3 = v[3];\n    return v0 * v0 + v1 * v1 + v2 * v2 + v3 * v3;\n}\n/**\n * Computes the square of the length of vector (same as lengthSq)\n * @param v - vector.\n * @returns square of the length of vector.\n */\nconst lenSq = lengthSq;\n/**\n * Computes the distance between 2 points\n * @param a - vector.\n * @param b - vector.\n * @returns distance between a and b\n */\nfunction distance(a, b) {\n    const dx = a[0] - b[0];\n    const dy = a[1] - b[1];\n    const dz = a[2] - b[2];\n    const dw = a[3] - b[3];\n    return Math.sqrt(dx * dx + dy * dy + dz * dz + dw * dw);\n}\n/**\n * Computes the distance between 2 points (same as distance)\n * @param a - vector.\n * @param b - vector.\n * @returns distance between a and b\n */\nconst dist = distance;\n/**\n * Computes the square of the distance between 2 points\n * @param a - vector.\n * @param b - vector.\n * @returns square of the distance between a and b\n */\nfunction distanceSq(a, b) {\n    const dx = a[0] - b[0];\n    const dy = a[1] - b[1];\n    const dz = a[2] - b[2];\n    const dw = a[3] - b[3];\n    return dx * dx + dy * dy + dz * dz + dw * dw;\n}\n/**\n * Computes the square of the distance between 2 points (same as distanceSq)\n * @param a - vector.\n * @param b - vector.\n * @returns square of the distance between a and b\n */\nconst distSq = distanceSq;\n/**\n * Divides a vector by its Euclidean length and returns the quotient.\n * @param v - The vector.\n * @param dst - vector to hold result. If not new one is created.\n * @returns The normalized vector.\n */\nfunction normalize(v, dst) {\n    dst = dst || new VecType(4);\n    const v0 = v[0];\n    const v1 = v[1];\n    const v2 = v[2];\n    const v3 = v[3];\n    const len = Math.sqrt(v0 * v0 + v1 * v1 + v2 * v2 + v3 * v3);\n    if (len > 0.00001) {\n        dst[0] = v0 / len;\n        dst[1] = v1 / len;\n        dst[2] = v2 / len;\n        dst[3] = v3 / len;\n    }\n    else {\n        dst[0] = 0;\n        dst[1] = 0;\n        dst[2] = 0;\n        dst[3] = 0;\n    }\n    return dst;\n}\n/**\n * Negates a vector.\n * @param v - The vector.\n * @param dst - vector to hold result. If not new one is created.\n * @returns -v.\n */\nfunction negate(v, dst) {\n    dst = dst || new VecType(4);\n    dst[0] = -v[0];\n    dst[1] = -v[1];\n    dst[2] = -v[2];\n    dst[3] = -v[3];\n    return dst;\n}\n/**\n * Copies a vector. (same as clone)\n * @param v - The vector.\n * @param dst - vector to hold result. If not new one is created.\n * @returns A copy of v.\n */\nfunction copy(v, dst) {\n    dst = dst || new VecType(4);\n    dst[0] = v[0];\n    dst[1] = v[1];\n    dst[2] = v[2];\n    dst[3] = v[3];\n    return dst;\n}\n/**\n * Clones a vector. (same as copy)\n * @param v - The vector.\n * @param dst - vector to hold result. If not new one is created.\n * @returns A copy of v.\n */\nconst clone = copy;\n/**\n * Multiplies a vector by another vector (component-wise); assumes a and\n * b have the same length.\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param dst - vector to hold result. If not new one is created.\n * @returns The vector of products of entries of a and b.\n */\nfunction multiply(a, b, dst) {\n    dst = dst || new VecType(4);\n    dst[0] = a[0] * b[0];\n    dst[1] = a[1] * b[1];\n    dst[2] = a[2] * b[2];\n    dst[3] = a[3] * b[3];\n    return dst;\n}\n/**\n * Multiplies a vector by another vector (component-wise); assumes a and\n * b have the same length. (same as mul)\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param dst - vector to hold result. If not new one is created.\n * @returns The vector of products of entries of a and b.\n */\nconst mul = multiply;\n/**\n * Divides a vector by another vector (component-wise); assumes a and\n * b have the same length.\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param dst - vector to hold result. If not new one is created.\n * @returns The vector of quotients of entries of a and b.\n */\nfunction divide(a, b, dst) {\n    dst = dst || new VecType(4);\n    dst[0] = a[0] / b[0];\n    dst[1] = a[1] / b[1];\n    dst[2] = a[2] / b[2];\n    dst[3] = a[3] / b[3];\n    return dst;\n}\n/**\n * Divides a vector by another vector (component-wise); assumes a and\n * b have the same length. (same as divide)\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param dst - vector to hold result. If not new one is created.\n * @returns The vector of quotients of entries of a and b.\n */\nconst div = divide;\n/**\n * Zero's a vector\n * @param dst - vector to hold result. If not new one is created.\n * @returns The zeroed vector.\n */\nfunction zero(dst) {\n    dst = dst || new VecType(4);\n    dst[0] = 0;\n    dst[1] = 0;\n    dst[2] = 0;\n    dst[3] = 0;\n    return dst;\n}\n/**\n * transform vec4 by 4x4 matrix\n * @param v - the vector\n * @param m - The matrix.\n * @param dst - optional vec4 to store result. If not passed a new one is created.\n * @returns the transformed vector\n */\nfunction transformMat4(v, m, dst) {\n    dst = dst || new VecType(4);\n    const x = v[0];\n    const y = v[1];\n    const z = v[2];\n    const w = v[3];\n    dst[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;\n    dst[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;\n    dst[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;\n    dst[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;\n    return dst;\n}\n\nvar vec4Impl = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    setDefaultType: setDefaultType$1,\n    create: create,\n    fromValues: fromValues,\n    ceil: ceil,\n    floor: floor,\n    round: round,\n    clamp: clamp,\n    add: add,\n    addScaled: addScaled,\n    subtract: subtract,\n    sub: sub,\n    equalsApproximately: equalsApproximately,\n    equals: equals,\n    lerp: lerp,\n    lerpV: lerpV,\n    max: max,\n    min: min,\n    mulScalar: mulScalar,\n    scale: scale,\n    divScalar: divScalar,\n    inverse: inverse,\n    invert: invert,\n    dot: dot,\n    length: length,\n    len: len,\n    lengthSq: lengthSq,\n    lenSq: lenSq,\n    distance: distance,\n    dist: dist,\n    distanceSq: distanceSq,\n    distSq: distSq,\n    normalize: normalize,\n    negate: negate,\n    copy: copy,\n    clone: clone,\n    multiply: multiply,\n    mul: mul,\n    divide: divide,\n    div: div,\n    zero: zero,\n    transformMat4: transformMat4\n});\n\n/**\n * Sets the type this library creates for all types\n * @remarks\n *\n * example:\n *\n * ```\n * setDefaultType(Float64Array);\n * ```\n *\n * @param ctor - the constructor for the type. Either `Float32Array`, `Float64Array`, or `Array`\n */\nfunction setDefaultType(ctor) {\n    setDefaultType$4(ctor);\n    setDefaultType$2(ctor);\n    setDefaultType$5(ctor);\n    setDefaultType$3(ctor);\n    setDefaultType$1(ctor);\n}\n\n\n//# sourceMappingURL=wgpu-matrix.module.js.map\n\n\n//# sourceURL=webpack://check_web_gpu/./node_modules/webgpu-matrix/dist/1.x/wgpu-matrix.module.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/async module */
/******/ 	(() => {
/******/ 		var webpackQueues = typeof Symbol === "function" ? Symbol("webpack queues") : "__webpack_queues__";
/******/ 		var webpackExports = typeof Symbol === "function" ? Symbol("webpack exports") : "__webpack_exports__";
/******/ 		var webpackError = typeof Symbol === "function" ? Symbol("webpack error") : "__webpack_error__";
/******/ 		var resolveQueue = (queue) => {
/******/ 			if(queue && queue.d < 1) {
/******/ 				queue.d = 1;
/******/ 				queue.forEach((fn) => (fn.r--));
/******/ 				queue.forEach((fn) => (fn.r-- ? fn.r++ : fn()));
/******/ 			}
/******/ 		}
/******/ 		var wrapDeps = (deps) => (deps.map((dep) => {
/******/ 			if(dep !== null && typeof dep === "object") {
/******/ 				if(dep[webpackQueues]) return dep;
/******/ 				if(dep.then) {
/******/ 					var queue = [];
/******/ 					queue.d = 0;
/******/ 					dep.then((r) => {
/******/ 						obj[webpackExports] = r;
/******/ 						resolveQueue(queue);
/******/ 					}, (e) => {
/******/ 						obj[webpackError] = e;
/******/ 						resolveQueue(queue);
/******/ 					});
/******/ 					var obj = {};
/******/ 					obj[webpackQueues] = (fn) => (fn(queue));
/******/ 					return obj;
/******/ 				}
/******/ 			}
/******/ 			var ret = {};
/******/ 			ret[webpackQueues] = x => {};
/******/ 			ret[webpackExports] = dep;
/******/ 			return ret;
/******/ 		}));
/******/ 		__webpack_require__.a = (module, body, hasAwait) => {
/******/ 			var queue;
/******/ 			hasAwait && ((queue = []).d = -1);
/******/ 			var depQueues = new Set();
/******/ 			var exports = module.exports;
/******/ 			var currentDeps;
/******/ 			var outerResolve;
/******/ 			var reject;
/******/ 			var promise = new Promise((resolve, rej) => {
/******/ 				reject = rej;
/******/ 				outerResolve = resolve;
/******/ 			});
/******/ 			promise[webpackExports] = exports;
/******/ 			promise[webpackQueues] = (fn) => (queue && fn(queue), depQueues.forEach(fn), promise["catch"](x => {}));
/******/ 			module.exports = promise;
/******/ 			body((deps) => {
/******/ 				currentDeps = wrapDeps(deps);
/******/ 				var fn;
/******/ 				var getResult = () => (currentDeps.map((d) => {
/******/ 					if(d[webpackError]) throw d[webpackError];
/******/ 					return d[webpackExports];
/******/ 				}))
/******/ 				var promise = new Promise((resolve) => {
/******/ 					fn = () => (resolve(getResult));
/******/ 					fn.r = 0;
/******/ 					var fnQueue = (q) => (q !== queue && !depQueues.has(q) && (depQueues.add(q), q && !q.d && (fn.r++, q.push(fn))));
/******/ 					currentDeps.map((dep) => (dep[webpackQueues](fnQueue)));
/******/ 				});
/******/ 				return fn.r ? promise : getResult();
/******/ 			}, (err) => ((err ? reject(promise[webpackError] = err) : outerResolve(exports)), resolveQueue(queue)));
/******/ 			queue && queue.d < 0 && (queue.d = 0);
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/main.ts");
/******/ 	
/******/ })()
;